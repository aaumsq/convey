//
// Generated by Bluespec Compiler, version 2014.07.A (build 34078, 2014-07-30)
//
// On Thu Mar  8 22:02:01 CST 2018
//
//
// Ports:
// Name                         I/O  size props
// RDY_init                       O     1 const
// result                         O    64
// RDY_result                     O     1 const
// numCASRetry                    O    64 reg
// RDY_numCASRetry                O     1 const
// numWLStall                     O    64 reg
// RDY_numWLStall                 O     1 const
// numEPStall                     O    64 reg
// RDY_numEPStall                 O     1 const
// numNodes                       O    64
// RDY_numNodes                   O     1 const
// RDY_setOffset                  O     1 const
// RDY_stop                       O     1 const
// isDone                         O     1 reg
// RDY_isDone                     O     1 const
// RDY_workIn_put                 O     1 reg
// workOut_get                    O    64 reg
// RDY_workOut_get                O     1 reg
// graphNodeReqs_0_get            O    33 reg
// RDY_graphNodeReqs_0_get        O     1 reg
// graphPartialNodeReqs_0_get     O    97 reg
// RDY_graphPartialNodeReqs_0_get  O     1 reg
// graphEdgeReqs_0_get            O    32 reg
// RDY_graphEdgeReqs_0_get        O     1 reg
// graphCASReqs_0_get             O    97 reg
// RDY_graphCASReqs_0_get         O     1 reg
// RDY_graphNodeResps_0_put       O     1 reg
// RDY_graphPartialNodeResps_0_put  O     1 reg
// RDY_graphEdgeResps_0_put       O     1 reg
// RDY_graphCASResps_0_put        O     1 reg
// CLK                            I     1 clock
// RST_N                          I     1 reset
// init_fpgaId                    I     2
// init_laneId                    I     4
// init_bSize                     I     5 reg
// init_bias                      I    32
// setOffset_offset               I    64
// workIn_put                     I    64 reg
// graphNodeResps_0_put           I   128 reg
// graphPartialNodeResps_0_put    I    64 reg
// graphEdgeResps_0_put           I    64 reg
// graphCASResps_0_put            I    33 reg
// EN_init                        I     1
// EN_setOffset                   I     1
// EN_stop                        I     1
// EN_workIn_put                  I     1
// EN_graphNodeResps_0_put        I     1
// EN_graphPartialNodeResps_0_put  I     1
// EN_graphEdgeResps_0_put        I     1
// EN_graphCASResps_0_put         I     1
// EN_result                      I     1 unused
// EN_numCASRetry                 I     1 unused
// EN_numWLStall                  I     1 unused
// EN_numEPStall                  I     1 unused
// EN_numNodes                    I     1 unused
// EN_workOut_get                 I     1
// EN_graphNodeReqs_0_get         I     1
// EN_graphPartialNodeReqs_0_get  I     1
// EN_graphEdgeReqs_0_get         I     1
// EN_graphCASReqs_0_get          I     1
//
// No combinational paths from inputs to outputs
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkSSSPEngine(CLK,
		    RST_N,

		    init_fpgaId,
		    init_laneId,
		    init_bSize,
		    init_bias,
		    EN_init,
		    RDY_init,

		    EN_result,
		    result,
		    RDY_result,

		    EN_numCASRetry,
		    numCASRetry,
		    RDY_numCASRetry,

		    EN_numWLStall,
		    numWLStall,
		    RDY_numWLStall,

		    EN_numEPStall,
		    numEPStall,
		    RDY_numEPStall,

		    EN_numNodes,
		    numNodes,
		    RDY_numNodes,

		    setOffset_offset,
		    EN_setOffset,
		    RDY_setOffset,

		    EN_stop,
		    RDY_stop,

		    isDone,
		    RDY_isDone,

		    workIn_put,
		    EN_workIn_put,
		    RDY_workIn_put,

		    EN_workOut_get,
		    workOut_get,
		    RDY_workOut_get,

		    EN_graphNodeReqs_0_get,
		    graphNodeReqs_0_get,
		    RDY_graphNodeReqs_0_get,

		    EN_graphPartialNodeReqs_0_get,
		    graphPartialNodeReqs_0_get,
		    RDY_graphPartialNodeReqs_0_get,

		    EN_graphEdgeReqs_0_get,
		    graphEdgeReqs_0_get,
		    RDY_graphEdgeReqs_0_get,

		    EN_graphCASReqs_0_get,
		    graphCASReqs_0_get,
		    RDY_graphCASReqs_0_get,

		    graphNodeResps_0_put,
		    EN_graphNodeResps_0_put,
		    RDY_graphNodeResps_0_put,

		    graphPartialNodeResps_0_put,
		    EN_graphPartialNodeResps_0_put,
		    RDY_graphPartialNodeResps_0_put,

		    graphEdgeResps_0_put,
		    EN_graphEdgeResps_0_put,
		    RDY_graphEdgeResps_0_put,

		    graphCASResps_0_put,
		    EN_graphCASResps_0_put,
		    RDY_graphCASResps_0_put);
  input  CLK;
  input  RST_N;

  // action method init
  input  [1 : 0] init_fpgaId;
  input  [3 : 0] init_laneId;
  input  [4 : 0] init_bSize;
  input  [31 : 0] init_bias;
  input  EN_init;
  output RDY_init;

  // actionvalue method result
  input  EN_result;
  output [63 : 0] result;
  output RDY_result;

  // actionvalue method numCASRetry
  input  EN_numCASRetry;
  output [63 : 0] numCASRetry;
  output RDY_numCASRetry;

  // actionvalue method numWLStall
  input  EN_numWLStall;
  output [63 : 0] numWLStall;
  output RDY_numWLStall;

  // actionvalue method numEPStall
  input  EN_numEPStall;
  output [63 : 0] numEPStall;
  output RDY_numEPStall;

  // actionvalue method numNodes
  input  EN_numNodes;
  output [63 : 0] numNodes;
  output RDY_numNodes;

  // action method setOffset
  input  [63 : 0] setOffset_offset;
  input  EN_setOffset;
  output RDY_setOffset;

  // action method stop
  input  EN_stop;
  output RDY_stop;

  // value method isDone
  output isDone;
  output RDY_isDone;

  // action method workIn_put
  input  [63 : 0] workIn_put;
  input  EN_workIn_put;
  output RDY_workIn_put;

  // actionvalue method workOut_get
  input  EN_workOut_get;
  output [63 : 0] workOut_get;
  output RDY_workOut_get;

  // actionvalue method graphNodeReqs_0_get
  input  EN_graphNodeReqs_0_get;
  output [32 : 0] graphNodeReqs_0_get;
  output RDY_graphNodeReqs_0_get;

  // actionvalue method graphPartialNodeReqs_0_get
  input  EN_graphPartialNodeReqs_0_get;
  output [96 : 0] graphPartialNodeReqs_0_get;
  output RDY_graphPartialNodeReqs_0_get;

  // actionvalue method graphEdgeReqs_0_get
  input  EN_graphEdgeReqs_0_get;
  output [31 : 0] graphEdgeReqs_0_get;
  output RDY_graphEdgeReqs_0_get;

  // actionvalue method graphCASReqs_0_get
  input  EN_graphCASReqs_0_get;
  output [96 : 0] graphCASReqs_0_get;
  output RDY_graphCASReqs_0_get;

  // action method graphNodeResps_0_put
  input  [127 : 0] graphNodeResps_0_put;
  input  EN_graphNodeResps_0_put;
  output RDY_graphNodeResps_0_put;

  // action method graphPartialNodeResps_0_put
  input  [63 : 0] graphPartialNodeResps_0_put;
  input  EN_graphPartialNodeResps_0_put;
  output RDY_graphPartialNodeResps_0_put;

  // action method graphEdgeResps_0_put
  input  [63 : 0] graphEdgeResps_0_put;
  input  EN_graphEdgeResps_0_put;
  output RDY_graphEdgeResps_0_put;

  // action method graphCASResps_0_put
  input  [32 : 0] graphCASResps_0_put;
  input  EN_graphCASResps_0_put;
  output RDY_graphCASResps_0_put;

  // signals for module outputs
  wire [96 : 0] graphCASReqs_0_get, graphPartialNodeReqs_0_get;
  wire [63 : 0] numCASRetry,
		numEPStall,
		numNodes,
		numWLStall,
		result,
		workOut_get;
  wire [32 : 0] graphNodeReqs_0_get;
  wire [31 : 0] graphEdgeReqs_0_get;
  wire RDY_graphCASReqs_0_get,
       RDY_graphCASResps_0_put,
       RDY_graphEdgeReqs_0_get,
       RDY_graphEdgeResps_0_put,
       RDY_graphNodeReqs_0_get,
       RDY_graphNodeResps_0_put,
       RDY_graphPartialNodeReqs_0_get,
       RDY_graphPartialNodeResps_0_put,
       RDY_init,
       RDY_isDone,
       RDY_numCASRetry,
       RDY_numEPStall,
       RDY_numNodes,
       RDY_numWLStall,
       RDY_result,
       RDY_setOffset,
       RDY_stop,
       RDY_workIn_put,
       RDY_workOut_get,
       isDone;

  // inlined wires
  wire [128 : 0] casContextQ2_fifo_wDataOut$wget,
		 casContextRetryQ_fifo_wDataOut$wget,
		 graphNodeQ1_fifo_wDataOut$wget,
		 graphNodeQ2_fifo_wDataOut$wget;
  wire [32 : 0] newDistProcQ_fifo_wDataOut$wget;
  wire [31 : 0] newDistQ_fifo_wDataOut$wget;
  wire [7 : 0] casContextRetryStallQ_fifo_wDataOut$wget;
  wire casContextQ2_fifo_pwDequeue$whas,
       casContextQ2_fifo_pwEnqueue$whas,
       casContextRetryQ_fifo_pwDequeue$whas,
       casContextRetryQ_fifo_pwEnqueue$whas,
       casContextRetryStallQ_fifo_pwDequeue$whas,
       casContextRetryStallQ_fifo_pwEnqueue$whas,
       graphNodeQ0_fifo_pwDequeue$whas,
       graphNodeQ0_fifo_pwEnqueue$whas,
       graphNodeQ0_fifo_wDataOut$wget,
       graphNodeQ1_fifo_pwDequeue$whas,
       graphNodeQ1_fifo_pwEnqueue$whas,
       graphNodeQ2_fifo_pwDequeue$whas,
       graphNodeQ2_fifo_pwEnqueue$whas,
       newDistProcQ_fifo_pwDequeue$whas,
       newDistProcQ_fifo_pwEnqueue$whas,
       newDistQ_fifo_pwDequeue$whas,
       newDistQ_fifo_pwEnqueue$whas;

  // register casContextQ2_fifo_rCache
  reg [140 : 0] casContextQ2_fifo_rCache;
  wire [140 : 0] casContextQ2_fifo_rCache$D_IN;
  wire casContextQ2_fifo_rCache$EN;

  // register casContextQ2_fifo_rRdPtr
  reg [10 : 0] casContextQ2_fifo_rRdPtr;
  wire [10 : 0] casContextQ2_fifo_rRdPtr$D_IN;
  wire casContextQ2_fifo_rRdPtr$EN;

  // register casContextQ2_fifo_rWrPtr
  reg [10 : 0] casContextQ2_fifo_rWrPtr;
  wire [10 : 0] casContextQ2_fifo_rWrPtr$D_IN;
  wire casContextQ2_fifo_rWrPtr$EN;

  // register casContextRetryQ_fifo_rCache
  reg [139 : 0] casContextRetryQ_fifo_rCache;
  wire [139 : 0] casContextRetryQ_fifo_rCache$D_IN;
  wire casContextRetryQ_fifo_rCache$EN;

  // register casContextRetryQ_fifo_rRdPtr
  reg [9 : 0] casContextRetryQ_fifo_rRdPtr;
  wire [9 : 0] casContextRetryQ_fifo_rRdPtr$D_IN;
  wire casContextRetryQ_fifo_rRdPtr$EN;

  // register casContextRetryQ_fifo_rWrPtr
  reg [9 : 0] casContextRetryQ_fifo_rWrPtr;
  wire [9 : 0] casContextRetryQ_fifo_rWrPtr$D_IN;
  wire casContextRetryQ_fifo_rWrPtr$EN;

  // register casContextRetryStallQ_fifo_rCache
  reg [18 : 0] casContextRetryStallQ_fifo_rCache;
  wire [18 : 0] casContextRetryStallQ_fifo_rCache$D_IN;
  wire casContextRetryStallQ_fifo_rCache$EN;

  // register casContextRetryStallQ_fifo_rRdPtr
  reg [9 : 0] casContextRetryStallQ_fifo_rRdPtr;
  wire [9 : 0] casContextRetryStallQ_fifo_rRdPtr$D_IN;
  wire casContextRetryStallQ_fifo_rRdPtr$EN;

  // register casContextRetryStallQ_fifo_rWrPtr
  reg [9 : 0] casContextRetryStallQ_fifo_rWrPtr;
  wire [9 : 0] casContextRetryStallQ_fifo_rWrPtr$D_IN;
  wire casContextRetryStallQ_fifo_rWrPtr$EN;

  // register casRetryPkt
  reg [128 : 0] casRetryPkt;
  wire [128 : 0] casRetryPkt$D_IN;
  wire casRetryPkt$EN;

  // register casRetryStall
  reg [7 : 0] casRetryStall;
  wire [7 : 0] casRetryStall$D_IN;
  wire casRetryStall$EN;

  // register casRetryWait
  reg casRetryWait;
  wire casRetryWait$D_IN, casRetryWait$EN;

  // register done
  reg done;
  wire done$D_IN, done$EN;

  // register edgeIdx
  reg [31 : 0] edgeIdx;
  wire [31 : 0] edgeIdx$D_IN;
  wire edgeIdx$EN;

  // register fpgaId
  reg [1 : 0] fpgaId;
  wire [1 : 0] fpgaId$D_IN;
  wire fpgaId$EN;

  // register graphNodeQ0_fifo_rCache
  reg [12 : 0] graphNodeQ0_fifo_rCache;
  wire [12 : 0] graphNodeQ0_fifo_rCache$D_IN;
  wire graphNodeQ0_fifo_rCache$EN;

  // register graphNodeQ0_fifo_rRdPtr
  reg [10 : 0] graphNodeQ0_fifo_rRdPtr;
  wire [10 : 0] graphNodeQ0_fifo_rRdPtr$D_IN;
  wire graphNodeQ0_fifo_rRdPtr$EN;

  // register graphNodeQ0_fifo_rWrPtr
  reg [10 : 0] graphNodeQ0_fifo_rWrPtr;
  wire [10 : 0] graphNodeQ0_fifo_rWrPtr$D_IN;
  wire graphNodeQ0_fifo_rWrPtr$EN;

  // register graphNodeQ1_fifo_rCache
  reg [139 : 0] graphNodeQ1_fifo_rCache;
  wire [139 : 0] graphNodeQ1_fifo_rCache$D_IN;
  wire graphNodeQ1_fifo_rCache$EN;

  // register graphNodeQ1_fifo_rRdPtr
  reg [9 : 0] graphNodeQ1_fifo_rRdPtr;
  wire [9 : 0] graphNodeQ1_fifo_rRdPtr$D_IN;
  wire graphNodeQ1_fifo_rRdPtr$EN;

  // register graphNodeQ1_fifo_rWrPtr
  reg [9 : 0] graphNodeQ1_fifo_rWrPtr;
  wire [9 : 0] graphNodeQ1_fifo_rWrPtr$D_IN;
  wire graphNodeQ1_fifo_rWrPtr$EN;

  // register graphNodeQ2_fifo_rCache
  reg [139 : 0] graphNodeQ2_fifo_rCache;
  wire [139 : 0] graphNodeQ2_fifo_rCache$D_IN;
  wire graphNodeQ2_fifo_rCache$EN;

  // register graphNodeQ2_fifo_rRdPtr
  reg [9 : 0] graphNodeQ2_fifo_rRdPtr;
  wire [9 : 0] graphNodeQ2_fifo_rRdPtr$D_IN;
  wire graphNodeQ2_fifo_rRdPtr$EN;

  // register graphNodeQ2_fifo_rWrPtr
  reg [9 : 0] graphNodeQ2_fifo_rWrPtr;
  wire [9 : 0] graphNodeQ2_fifo_rWrPtr$D_IN;
  wire graphNodeQ2_fifo_rWrPtr$EN;

  // register laneId
  reg [3 : 0] laneId;
  wire [3 : 0] laneId$D_IN;
  wire laneId$EN;

  // register lfsr_r
  reg [7 : 0] lfsr_r;
  wire [7 : 0] lfsr_r$D_IN;
  wire lfsr_r$EN;

  // register newDistProcQ_fifo_rCache
  reg [44 : 0] newDistProcQ_fifo_rCache;
  wire [44 : 0] newDistProcQ_fifo_rCache$D_IN;
  wire newDistProcQ_fifo_rCache$EN;

  // register newDistProcQ_fifo_rRdPtr
  reg [10 : 0] newDistProcQ_fifo_rRdPtr;
  wire [10 : 0] newDistProcQ_fifo_rRdPtr$D_IN;
  wire newDistProcQ_fifo_rRdPtr$EN;

  // register newDistProcQ_fifo_rWrPtr
  reg [10 : 0] newDistProcQ_fifo_rWrPtr;
  wire [10 : 0] newDistProcQ_fifo_rWrPtr$D_IN;
  wire newDistProcQ_fifo_rWrPtr$EN;

  // register newDistQ_fifo_rCache
  reg [43 : 0] newDistQ_fifo_rCache;
  wire [43 : 0] newDistQ_fifo_rCache$D_IN;
  wire newDistQ_fifo_rCache$EN;

  // register newDistQ_fifo_rRdPtr
  reg [10 : 0] newDistQ_fifo_rRdPtr;
  wire [10 : 0] newDistQ_fifo_rRdPtr$D_IN;
  wire newDistQ_fifo_rRdPtr$EN;

  // register newDistQ_fifo_rWrPtr
  reg [10 : 0] newDistQ_fifo_rWrPtr;
  wire [10 : 0] newDistQ_fifo_rWrPtr$D_IN;
  wire newDistQ_fifo_rWrPtr$EN;

  // register numCASIssued
  reg [47 : 0] numCASIssued;
  wire [47 : 0] numCASIssued$D_IN;
  wire numCASIssued$EN;

  // register numCASRetried
  reg [63 : 0] numCASRetried;
  wire [63 : 0] numCASRetried$D_IN;
  wire numCASRetried$EN;

  // register numCasCxt1Full
  reg [47 : 0] numCasCxt1Full;
  wire [47 : 0] numCasCxt1Full$D_IN;
  wire numCasCxt1Full$EN;

  // register numCasCxt2Full
  reg [47 : 0] numCasCxt2Full;
  wire [47 : 0] numCasCxt2Full$D_IN;
  wire numCasCxt2Full$EN;

  // register numCasCxtRetryFull
  reg [47 : 0] numCasCxtRetryFull;
  wire [47 : 0] numCasCxtRetryFull$D_IN;
  wire numCasCxtRetryFull$EN;

  // register numCasCxtRetryStallFull
  reg [47 : 0] numCasCxtRetryStallFull;
  wire [47 : 0] numCasCxtRetryStallFull$D_IN;
  wire numCasCxtRetryStallFull$EN;

  // register numEdgePipeStall
  reg [63 : 0] numEdgePipeStall;
  wire [63 : 0] numEdgePipeStall$D_IN;
  wire numEdgePipeStall$EN;

  // register numEdgesDiscarded
  reg [47 : 0] numEdgesDiscarded;
  wire [47 : 0] numEdgesDiscarded$D_IN;
  wire numEdgesDiscarded$EN;

  // register numEdgesFetched
  reg [47 : 0] numEdgesFetched;
  wire [47 : 0] numEdgesFetched$D_IN;
  wire numEdgesFetched$EN;

  // register numEdgesRetired
  reg [47 : 0] numEdgesRetired;
  wire [47 : 0] numEdgesRetired$D_IN;
  wire numEdgesRetired$EN;

  // register numGraphCASReqFull
  reg [47 : 0] numGraphCASReqFull;
  wire [47 : 0] numGraphCASReqFull$D_IN;
  wire numGraphCASReqFull$EN;

  // register numGraphEdgeReqFull
  reg [47 : 0] numGraphEdgeReqFull;
  wire [47 : 0] numGraphEdgeReqFull$D_IN;
  wire numGraphEdgeReqFull$EN;

  // register numGraphNode1Full
  reg [47 : 0] numGraphNode1Full;
  wire [47 : 0] numGraphNode1Full$D_IN;
  wire numGraphNode1Full$EN;

  // register numGraphNode2Full
  reg [47 : 0] numGraphNode2Full;
  wire [47 : 0] numGraphNode2Full$D_IN;
  wire numGraphNode2Full$EN;

  // register numGraphNodeReqFull
  reg [47 : 0] numGraphNodeReqFull;
  wire [47 : 0] numGraphNodeReqFull$D_IN;
  wire numGraphNodeReqFull$EN;

  // register numNewDistFull
  reg [47 : 0] numNewDistFull;
  wire [47 : 0] numNewDistFull$D_IN;
  wire numNewDistFull$EN;

  // register numWorkDiscarded
  reg [47 : 0] numWorkDiscarded;
  wire [47 : 0] numWorkDiscarded$D_IN;
  wire numWorkDiscarded$EN;

  // register numWorkFetched
  reg [47 : 0] numWorkFetched;
  wire [47 : 0] numWorkFetched$D_IN;
  wire numWorkFetched$EN;

  // register numWorkInEmpty
  reg [47 : 0] numWorkInEmpty;
  wire [47 : 0] numWorkInEmpty$D_IN;
  wire numWorkInEmpty$EN;

  // register numWorkOutFull
  reg [47 : 0] numWorkOutFull;
  wire [47 : 0] numWorkOutFull$D_IN;
  wire numWorkOutFull$EN;

  // register numWorkRetired
  reg [47 : 0] numWorkRetired;
  wire [47 : 0] numWorkRetired$D_IN;
  wire numWorkRetired$EN;

  // register numWorklistStall
  reg [63 : 0] numWorklistStall;
  wire [63 : 0] numWorklistStall$D_IN;
  wire numWorklistStall$EN;

  // register rg_bSize
  reg [4 : 0] rg_bSize;
  wire [4 : 0] rg_bSize$D_IN;
  wire rg_bSize$EN;

  // register rg_bias
  reg [31 : 0] rg_bias;
  wire [31 : 0] rg_bias$D_IN;
  wire rg_bias$EN;

  // register rg_offset
  reg [63 : 0] rg_offset;
  wire [63 : 0] rg_offset$D_IN;
  wire rg_offset$EN;

  // register rg_totalBias
  reg [31 : 0] rg_totalBias;
  wire [31 : 0] rg_totalBias$D_IN;
  wire rg_totalBias$EN;

  // register started
  reg started;
  wire started$D_IN, started$EN;

  // ports of submodule casContextQ1
  wire [128 : 0] casContextQ1$D_IN, casContextQ1$D_OUT;
  wire casContextQ1$CLR,
       casContextQ1$DEQ,
       casContextQ1$EMPTY_N,
       casContextQ1$ENQ,
       casContextQ1$FULL_N;

  // ports of submodule casContextQ2_deqQ
  wire [128 : 0] casContextQ2_deqQ$D_IN, casContextQ2_deqQ$D_OUT;
  wire casContextQ2_deqQ$CLR,
       casContextQ2_deqQ$DEQ,
       casContextQ2_deqQ$EMPTY_N,
       casContextQ2_deqQ$ENQ,
       casContextQ2_deqQ$FULL_N;

  // ports of submodule casContextQ2_enqQ
  wire [128 : 0] casContextQ2_enqQ$D_IN, casContextQ2_enqQ$D_OUT;
  wire casContextQ2_enqQ$CLR,
       casContextQ2_enqQ$DEQ,
       casContextQ2_enqQ$EMPTY_N,
       casContextQ2_enqQ$ENQ,
       casContextQ2_enqQ$FULL_N;

  // ports of submodule casContextQ2_fifo_memory
  wire [128 : 0] casContextQ2_fifo_memory$DIA,
		 casContextQ2_fifo_memory$DIB,
		 casContextQ2_fifo_memory$DOB;
  wire [9 : 0] casContextQ2_fifo_memory$ADDRA, casContextQ2_fifo_memory$ADDRB;
  wire casContextQ2_fifo_memory$ENA,
       casContextQ2_fifo_memory$ENB,
       casContextQ2_fifo_memory$WEA,
       casContextQ2_fifo_memory$WEB;

  // ports of submodule casContextRetryQ_deqQ
  wire [128 : 0] casContextRetryQ_deqQ$D_IN, casContextRetryQ_deqQ$D_OUT;
  wire casContextRetryQ_deqQ$CLR,
       casContextRetryQ_deqQ$DEQ,
       casContextRetryQ_deqQ$EMPTY_N,
       casContextRetryQ_deqQ$ENQ,
       casContextRetryQ_deqQ$FULL_N;

  // ports of submodule casContextRetryQ_enqQ
  wire [128 : 0] casContextRetryQ_enqQ$D_IN, casContextRetryQ_enqQ$D_OUT;
  wire casContextRetryQ_enqQ$CLR,
       casContextRetryQ_enqQ$DEQ,
       casContextRetryQ_enqQ$EMPTY_N,
       casContextRetryQ_enqQ$ENQ,
       casContextRetryQ_enqQ$FULL_N;

  // ports of submodule casContextRetryQ_fifo_memory
  wire [128 : 0] casContextRetryQ_fifo_memory$DIA,
		 casContextRetryQ_fifo_memory$DIB,
		 casContextRetryQ_fifo_memory$DOB;
  wire [8 : 0] casContextRetryQ_fifo_memory$ADDRA,
	       casContextRetryQ_fifo_memory$ADDRB;
  wire casContextRetryQ_fifo_memory$ENA,
       casContextRetryQ_fifo_memory$ENB,
       casContextRetryQ_fifo_memory$WEA,
       casContextRetryQ_fifo_memory$WEB;

  // ports of submodule casContextRetryStallQ_deqQ
  wire [7 : 0] casContextRetryStallQ_deqQ$D_IN,
	       casContextRetryStallQ_deqQ$D_OUT;
  wire casContextRetryStallQ_deqQ$CLR,
       casContextRetryStallQ_deqQ$DEQ,
       casContextRetryStallQ_deqQ$EMPTY_N,
       casContextRetryStallQ_deqQ$ENQ,
       casContextRetryStallQ_deqQ$FULL_N;

  // ports of submodule casContextRetryStallQ_enqQ
  wire [7 : 0] casContextRetryStallQ_enqQ$D_IN,
	       casContextRetryStallQ_enqQ$D_OUT;
  wire casContextRetryStallQ_enqQ$CLR,
       casContextRetryStallQ_enqQ$DEQ,
       casContextRetryStallQ_enqQ$EMPTY_N,
       casContextRetryStallQ_enqQ$ENQ,
       casContextRetryStallQ_enqQ$FULL_N;

  // ports of submodule casContextRetryStallQ_fifo_memory
  wire [8 : 0] casContextRetryStallQ_fifo_memory$ADDRA,
	       casContextRetryStallQ_fifo_memory$ADDRB;
  wire [7 : 0] casContextRetryStallQ_fifo_memory$DIA,
	       casContextRetryStallQ_fifo_memory$DIB,
	       casContextRetryStallQ_fifo_memory$DOB;
  wire casContextRetryStallQ_fifo_memory$ENA,
       casContextRetryStallQ_fifo_memory$ENB,
       casContextRetryStallQ_fifo_memory$WEA,
       casContextRetryStallQ_fifo_memory$WEB;

  // ports of submodule casNumInFlight
  wire [9 : 0] casNumInFlight$init_val;
  wire casNumInFlight$EN_dec,
       casNumInFlight$EN_dec2,
       casNumInFlight$EN_inc,
       casNumInFlight$EN_init,
       casNumInFlight$notMax;

  // ports of submodule graphCASReqQs_0
  wire [96 : 0] graphCASReqQs_0$D_IN, graphCASReqQs_0$D_OUT;
  wire graphCASReqQs_0$CLR,
       graphCASReqQs_0$DEQ,
       graphCASReqQs_0$EMPTY_N,
       graphCASReqQs_0$ENQ,
       graphCASReqQs_0$FULL_N;

  // ports of submodule graphCASRespQs_0
  wire [32 : 0] graphCASRespQs_0$D_IN, graphCASRespQs_0$D_OUT;
  wire graphCASRespQs_0$CLR,
       graphCASRespQs_0$DEQ,
       graphCASRespQs_0$EMPTY_N,
       graphCASRespQs_0$ENQ,
       graphCASRespQs_0$FULL_N;

  // ports of submodule graphEdgeReqQs_0
  wire [31 : 0] graphEdgeReqQs_0$D_IN, graphEdgeReqQs_0$D_OUT;
  wire graphEdgeReqQs_0$CLR,
       graphEdgeReqQs_0$DEQ,
       graphEdgeReqQs_0$EMPTY_N,
       graphEdgeReqQs_0$ENQ,
       graphEdgeReqQs_0$FULL_N;

  // ports of submodule graphEdgeRespQs_0
  wire [63 : 0] graphEdgeRespQs_0$D_IN, graphEdgeRespQs_0$D_OUT;
  wire graphEdgeRespQs_0$CLR,
       graphEdgeRespQs_0$DEQ,
       graphEdgeRespQs_0$EMPTY_N,
       graphEdgeRespQs_0$ENQ,
       graphEdgeRespQs_0$FULL_N;

  // ports of submodule graphNodeQ0_deqQ
  wire graphNodeQ0_deqQ$CLR,
       graphNodeQ0_deqQ$DEQ,
       graphNodeQ0_deqQ$D_IN,
       graphNodeQ0_deqQ$D_OUT,
       graphNodeQ0_deqQ$EMPTY_N,
       graphNodeQ0_deqQ$ENQ,
       graphNodeQ0_deqQ$FULL_N;

  // ports of submodule graphNodeQ0_enqQ
  wire graphNodeQ0_enqQ$CLR,
       graphNodeQ0_enqQ$DEQ,
       graphNodeQ0_enqQ$D_IN,
       graphNodeQ0_enqQ$D_OUT,
       graphNodeQ0_enqQ$EMPTY_N,
       graphNodeQ0_enqQ$ENQ,
       graphNodeQ0_enqQ$FULL_N;

  // ports of submodule graphNodeQ0_fifo_memory
  wire [9 : 0] graphNodeQ0_fifo_memory$ADDRA, graphNodeQ0_fifo_memory$ADDRB;
  wire graphNodeQ0_fifo_memory$DIA,
       graphNodeQ0_fifo_memory$DIB,
       graphNodeQ0_fifo_memory$DOB,
       graphNodeQ0_fifo_memory$ENA,
       graphNodeQ0_fifo_memory$ENB,
       graphNodeQ0_fifo_memory$WEA,
       graphNodeQ0_fifo_memory$WEB;

  // ports of submodule graphNodeQ1_deqQ
  wire [128 : 0] graphNodeQ1_deqQ$D_IN, graphNodeQ1_deqQ$D_OUT;
  wire graphNodeQ1_deqQ$CLR,
       graphNodeQ1_deqQ$DEQ,
       graphNodeQ1_deqQ$EMPTY_N,
       graphNodeQ1_deqQ$ENQ,
       graphNodeQ1_deqQ$FULL_N;

  // ports of submodule graphNodeQ1_enqQ
  wire [128 : 0] graphNodeQ1_enqQ$D_IN, graphNodeQ1_enqQ$D_OUT;
  wire graphNodeQ1_enqQ$CLR,
       graphNodeQ1_enqQ$DEQ,
       graphNodeQ1_enqQ$EMPTY_N,
       graphNodeQ1_enqQ$ENQ,
       graphNodeQ1_enqQ$FULL_N;

  // ports of submodule graphNodeQ1_fifo_memory
  wire [128 : 0] graphNodeQ1_fifo_memory$DIA,
		 graphNodeQ1_fifo_memory$DIB,
		 graphNodeQ1_fifo_memory$DOB;
  wire [8 : 0] graphNodeQ1_fifo_memory$ADDRA, graphNodeQ1_fifo_memory$ADDRB;
  wire graphNodeQ1_fifo_memory$ENA,
       graphNodeQ1_fifo_memory$ENB,
       graphNodeQ1_fifo_memory$WEA,
       graphNodeQ1_fifo_memory$WEB;

  // ports of submodule graphNodeQ2_deqQ
  wire [128 : 0] graphNodeQ2_deqQ$D_IN, graphNodeQ2_deqQ$D_OUT;
  wire graphNodeQ2_deqQ$CLR,
       graphNodeQ2_deqQ$DEQ,
       graphNodeQ2_deqQ$EMPTY_N,
       graphNodeQ2_deqQ$ENQ,
       graphNodeQ2_deqQ$FULL_N;

  // ports of submodule graphNodeQ2_enqQ
  wire [128 : 0] graphNodeQ2_enqQ$D_IN, graphNodeQ2_enqQ$D_OUT;
  wire graphNodeQ2_enqQ$CLR,
       graphNodeQ2_enqQ$DEQ,
       graphNodeQ2_enqQ$EMPTY_N,
       graphNodeQ2_enqQ$ENQ,
       graphNodeQ2_enqQ$FULL_N;

  // ports of submodule graphNodeQ2_fifo_memory
  wire [128 : 0] graphNodeQ2_fifo_memory$DIA,
		 graphNodeQ2_fifo_memory$DIB,
		 graphNodeQ2_fifo_memory$DOB;
  wire [8 : 0] graphNodeQ2_fifo_memory$ADDRA, graphNodeQ2_fifo_memory$ADDRB;
  wire graphNodeQ2_fifo_memory$ENA,
       graphNodeQ2_fifo_memory$ENB,
       graphNodeQ2_fifo_memory$WEA,
       graphNodeQ2_fifo_memory$WEB;

  // ports of submodule graphNodeReqQs_0
  wire [32 : 0] graphNodeReqQs_0$D_IN, graphNodeReqQs_0$D_OUT;
  wire graphNodeReqQs_0$CLR,
       graphNodeReqQs_0$DEQ,
       graphNodeReqQs_0$EMPTY_N,
       graphNodeReqQs_0$ENQ,
       graphNodeReqQs_0$FULL_N;

  // ports of submodule graphNodeRespQs_0
  wire [127 : 0] graphNodeRespQs_0$D_IN, graphNodeRespQs_0$D_OUT;
  wire graphNodeRespQs_0$CLR,
       graphNodeRespQs_0$DEQ,
       graphNodeRespQs_0$EMPTY_N,
       graphNodeRespQs_0$ENQ,
       graphNodeRespQs_0$FULL_N;

  // ports of submodule graphPartialNodeReqQs_0
  wire [96 : 0] graphPartialNodeReqQs_0$D_IN, graphPartialNodeReqQs_0$D_OUT;
  wire graphPartialNodeReqQs_0$CLR,
       graphPartialNodeReqQs_0$DEQ,
       graphPartialNodeReqQs_0$EMPTY_N,
       graphPartialNodeReqQs_0$ENQ,
       graphPartialNodeReqQs_0$FULL_N;

  // ports of submodule graphPartialNodeRespQs_0
  wire [63 : 0] graphPartialNodeRespQs_0$D_IN, graphPartialNodeRespQs_0$D_OUT;
  wire graphPartialNodeRespQs_0$CLR,
       graphPartialNodeRespQs_0$DEQ,
       graphPartialNodeRespQs_0$EMPTY_N,
       graphPartialNodeRespQs_0$ENQ,
       graphPartialNodeRespQs_0$FULL_N;

  // ports of submodule newDistProcQ_deqQ
  wire [32 : 0] newDistProcQ_deqQ$D_IN, newDistProcQ_deqQ$D_OUT;
  wire newDistProcQ_deqQ$CLR,
       newDistProcQ_deqQ$DEQ,
       newDistProcQ_deqQ$EMPTY_N,
       newDistProcQ_deqQ$ENQ,
       newDistProcQ_deqQ$FULL_N;

  // ports of submodule newDistProcQ_enqQ
  wire [32 : 0] newDistProcQ_enqQ$D_IN, newDistProcQ_enqQ$D_OUT;
  wire newDistProcQ_enqQ$CLR,
       newDistProcQ_enqQ$DEQ,
       newDistProcQ_enqQ$EMPTY_N,
       newDistProcQ_enqQ$ENQ,
       newDistProcQ_enqQ$FULL_N;

  // ports of submodule newDistProcQ_fifo_memory
  wire [32 : 0] newDistProcQ_fifo_memory$DIA,
		newDistProcQ_fifo_memory$DIB,
		newDistProcQ_fifo_memory$DOB;
  wire [9 : 0] newDistProcQ_fifo_memory$ADDRA, newDistProcQ_fifo_memory$ADDRB;
  wire newDistProcQ_fifo_memory$ENA,
       newDistProcQ_fifo_memory$ENB,
       newDistProcQ_fifo_memory$WEA,
       newDistProcQ_fifo_memory$WEB;

  // ports of submodule newDistQ_deqQ
  wire [31 : 0] newDistQ_deqQ$D_IN, newDistQ_deqQ$D_OUT;
  wire newDistQ_deqQ$CLR,
       newDistQ_deqQ$DEQ,
       newDistQ_deqQ$EMPTY_N,
       newDistQ_deqQ$ENQ,
       newDistQ_deqQ$FULL_N;

  // ports of submodule newDistQ_enqQ
  wire [31 : 0] newDistQ_enqQ$D_IN, newDistQ_enqQ$D_OUT;
  wire newDistQ_enqQ$CLR,
       newDistQ_enqQ$DEQ,
       newDistQ_enqQ$EMPTY_N,
       newDistQ_enqQ$ENQ,
       newDistQ_enqQ$FULL_N;

  // ports of submodule newDistQ_fifo_memory
  wire [31 : 0] newDistQ_fifo_memory$DIA,
		newDistQ_fifo_memory$DIB,
		newDistQ_fifo_memory$DOB;
  wire [9 : 0] newDistQ_fifo_memory$ADDRA, newDistQ_fifo_memory$ADDRB;
  wire newDistQ_fifo_memory$ENA,
       newDistQ_fifo_memory$ENB,
       newDistQ_fifo_memory$WEA,
       newDistQ_fifo_memory$WEB;

  // ports of submodule workInQ
  wire [63 : 0] workInQ$D_IN, workInQ$D_OUT;
  wire workInQ$CLR, workInQ$DEQ, workInQ$EMPTY_N, workInQ$ENQ, workInQ$FULL_N;

  // ports of submodule workOutQ
  wire [63 : 0] workOutQ$D_IN, workOutQ$D_OUT;
  wire workOutQ$CLR,
       workOutQ$DEQ,
       workOutQ$EMPTY_N,
       workOutQ$ENQ,
       workOutQ$FULL_N;

  // rule scheduling signals
  wire WILL_FIRE_RL_cas,
       WILL_FIRE_RL_casDone,
       WILL_FIRE_RL_casRetry,
       WILL_FIRE_RL_casRetryDeq,
       WILL_FIRE_RL_getEdges,
       WILL_FIRE_RL_getSrcNode,
       WILL_FIRE_RL_recvDestNode,
       WILL_FIRE_RL_recvSrcNode;

  // inputs to muxes for submodule ports
  wire [128 : 0] MUX_casContextQ1$enq_1__VAL_2;
  wire [63 : 0] MUX_numCASRetried$write_1__VAL_2,
		MUX_numEdgePipeStall$write_1__VAL_2,
		MUX_numWorklistStall$write_1__VAL_2;
  wire [47 : 0] MUX_numCASIssued$write_1__VAL_2,
		MUX_numEdgesDiscarded$write_1__VAL_2,
		MUX_numEdgesFetched$write_1__VAL_2,
		MUX_numEdgesRetired$write_1__VAL_2,
		MUX_numWorkDiscarded$write_1__VAL_2,
		MUX_numWorkFetched$write_1__VAL_2,
		MUX_numWorkRetired$write_1__VAL_2;
  wire [31 : 0] MUX_rg_totalBias$write_1__VAL_2;
  wire [7 : 0] MUX_casRetryStall$write_1__VAL_1,
	       MUX_lfsr_r$write_1__VAL_1,
	       MUX_lfsr_r$write_1__VAL_2;
  wire MUX_casContextQ1$enq_1__SEL_1,
       MUX_casRetryStall$write_1__SEL_1,
       MUX_done$write_1__VAL_2,
       MUX_lfsr_r$write_1__SEL_2,
       MUX_numCASIssued$write_1__SEL_2,
       MUX_numEdgesDiscarded$write_1__SEL_2,
       MUX_numEdgesFetched$write_1__SEL_2,
       MUX_numEdgesRetired$write_1__SEL_2,
       MUX_numWorkFetched$write_1__SEL_2,
       MUX_numWorkRetired$write_1__SEL_2;

  // remaining internal signals
  reg [31 : 0] Task_$stime__avValue1,
	       Task_$stime__avValue2,
	       Task_$stime__avValue3;
  wire [127 : 0] IF_graphNodeQ1_fifo_wDataIn_whas__2_THEN_graph_ETC___d55,
		 IF_graphNodeQ2_fifo_wDataIn_whas__00_THEN_grap_ETC___d103;
  wire [63 : 0] x__h17524;
  wire [31 : 0] IF_distance_27660_ULE_7_THEN_distance_27660_EL_ETC__q1,
		distance_2__h17660,
		distance__h17659,
		x3__h7119,
		x__h10031,
		x__h11508,
		x__h11526,
		x__h11548,
		x__h11603,
		x__h15887,
		x__h17691,
		x__h9931,
		x__h9954,
		x__h9976,
		x__read_id__h8462,
		y__h15858;
  wire [10 : 0] x__h10048,
		x__h10194,
		x__h2817,
		x__h2919,
		x__h7202,
		x__h7304,
		x__h8523,
		x__h8631;
  wire [9 : 0] x__h11620,
	       x__h11766,
	       x__h13120,
	       x__h13222,
	       x__h4188,
	       x__h4320,
	       x__h5728,
	       x__h5860;
  wire [7 : 0] x3__h13037;
  wire [4 : 0] x__h17528;
  wire IF_graphCASRespQs_0_first__37_BIT_32_38_THEN_c_ETC___d552,
       NOT_workInQ_notEmpty__87_88_AND_NOT_workOutQ_n_ETC___d397,
       casContextQ1_first__18_BITS_96_TO_65_19_ULT_ca_ETC___d521,
       casContextQ2_deqQ_first__39_BITS_96_TO_65_44_U_ETC___d546,
       edgeIdx_49_EQ_graphNodeQ1_deqQ_first__47_BITS__ETC___d454,
       graphNodeQ2_deqQ_i_notEmpty__66_AND_newDistQ_e_ETC___d472,
       x__h2809,
       x__read_procId__h4079,
       x__read_procId__h5619,
       x__read_procId__h8463,
       x__read_snd_snd_procId__h11541,
       x__read_snd_snd_procId__h9969;

  // action method init
  assign RDY_init = 1'd1 ;

  // actionvalue method result
  assign result = { 16'd0, numEdgesFetched } ;
  assign RDY_result = 1'd1 ;

  // actionvalue method numCASRetry
  assign numCASRetry = numCASRetried ;
  assign RDY_numCASRetry = 1'd1 ;

  // actionvalue method numWLStall
  assign numWLStall = numWorklistStall ;
  assign RDY_numWLStall = 1'd1 ;

  // actionvalue method numEPStall
  assign numEPStall = numEdgePipeStall ;
  assign RDY_numEPStall = 1'd1 ;

  // actionvalue method numNodes
  assign numNodes = { 16'd0, numWorkFetched } ;
  assign RDY_numNodes = 1'd1 ;

  // action method setOffset
  assign RDY_setOffset = 1'd1 ;

  // action method stop
  assign RDY_stop = 1'd1 ;

  // value method isDone
  assign isDone = done ;
  assign RDY_isDone = 1'd1 ;

  // action method workIn_put
  assign RDY_workIn_put = workInQ$FULL_N ;

  // actionvalue method workOut_get
  assign workOut_get = workOutQ$D_OUT ;
  assign RDY_workOut_get = workOutQ$EMPTY_N ;

  // actionvalue method graphNodeReqs_0_get
  assign graphNodeReqs_0_get = graphNodeReqQs_0$D_OUT ;
  assign RDY_graphNodeReqs_0_get = graphNodeReqQs_0$EMPTY_N ;

  // actionvalue method graphPartialNodeReqs_0_get
  assign graphPartialNodeReqs_0_get = graphPartialNodeReqQs_0$D_OUT ;
  assign RDY_graphPartialNodeReqs_0_get = graphPartialNodeReqQs_0$EMPTY_N ;

  // actionvalue method graphEdgeReqs_0_get
  assign graphEdgeReqs_0_get = graphEdgeReqQs_0$D_OUT ;
  assign RDY_graphEdgeReqs_0_get = graphEdgeReqQs_0$EMPTY_N ;

  // actionvalue method graphCASReqs_0_get
  assign graphCASReqs_0_get = graphCASReqQs_0$D_OUT ;
  assign RDY_graphCASReqs_0_get = graphCASReqQs_0$EMPTY_N ;

  // action method graphNodeResps_0_put
  assign RDY_graphNodeResps_0_put = graphNodeRespQs_0$FULL_N ;

  // action method graphPartialNodeResps_0_put
  assign RDY_graphPartialNodeResps_0_put = graphPartialNodeRespQs_0$FULL_N ;

  // action method graphEdgeResps_0_put
  assign RDY_graphEdgeResps_0_put = graphEdgeRespQs_0$FULL_N ;

  // action method graphCASResps_0_put
  assign RDY_graphCASResps_0_put = graphCASRespQs_0$FULL_N ;

  // submodule casContextQ1
  SizedFIFO #(.p1width(32'd129),
	      .p2depth(32'd4),
	      .p3cntr_width(32'd2),
	      .guarded(32'd1)) casContextQ1(.RST(RST_N),
					    .CLK(CLK),
					    .D_IN(casContextQ1$D_IN),
					    .ENQ(casContextQ1$ENQ),
					    .DEQ(casContextQ1$DEQ),
					    .CLR(casContextQ1$CLR),
					    .D_OUT(casContextQ1$D_OUT),
					    .FULL_N(casContextQ1$FULL_N),
					    .EMPTY_N(casContextQ1$EMPTY_N));

  // submodule casContextQ2_deqQ
  FIFO2 #(.width(32'd129), .guarded(32'd1)) casContextQ2_deqQ(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(casContextQ2_deqQ$D_IN),
							      .ENQ(casContextQ2_deqQ$ENQ),
							      .DEQ(casContextQ2_deqQ$DEQ),
							      .CLR(casContextQ2_deqQ$CLR),
							      .D_OUT(casContextQ2_deqQ$D_OUT),
							      .FULL_N(casContextQ2_deqQ$FULL_N),
							      .EMPTY_N(casContextQ2_deqQ$EMPTY_N));

  // submodule casContextQ2_enqQ
  FIFO2 #(.width(32'd129), .guarded(32'd1)) casContextQ2_enqQ(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(casContextQ2_enqQ$D_IN),
							      .ENQ(casContextQ2_enqQ$ENQ),
							      .DEQ(casContextQ2_enqQ$DEQ),
							      .CLR(casContextQ2_enqQ$CLR),
							      .D_OUT(casContextQ2_enqQ$D_OUT),
							      .FULL_N(casContextQ2_enqQ$FULL_N),
							      .EMPTY_N(casContextQ2_enqQ$EMPTY_N));

  // submodule casContextQ2_fifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd129),
	  .MEMSIZE(11'd1024)) casContextQ2_fifo_memory(.CLKA(CLK),
						       .CLKB(CLK),
						       .ADDRA(casContextQ2_fifo_memory$ADDRA),
						       .ADDRB(casContextQ2_fifo_memory$ADDRB),
						       .DIA(casContextQ2_fifo_memory$DIA),
						       .DIB(casContextQ2_fifo_memory$DIB),
						       .WEA(casContextQ2_fifo_memory$WEA),
						       .WEB(casContextQ2_fifo_memory$WEB),
						       .ENA(casContextQ2_fifo_memory$ENA),
						       .ENB(casContextQ2_fifo_memory$ENB),
						       .DOA(),
						       .DOB(casContextQ2_fifo_memory$DOB));

  // submodule casContextRetryQ_deqQ
  FIFO2 #(.width(32'd129), .guarded(32'd1)) casContextRetryQ_deqQ(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(casContextRetryQ_deqQ$D_IN),
								  .ENQ(casContextRetryQ_deqQ$ENQ),
								  .DEQ(casContextRetryQ_deqQ$DEQ),
								  .CLR(casContextRetryQ_deqQ$CLR),
								  .D_OUT(casContextRetryQ_deqQ$D_OUT),
								  .FULL_N(casContextRetryQ_deqQ$FULL_N),
								  .EMPTY_N(casContextRetryQ_deqQ$EMPTY_N));

  // submodule casContextRetryQ_enqQ
  FIFO2 #(.width(32'd129), .guarded(32'd1)) casContextRetryQ_enqQ(.RST(RST_N),
								  .CLK(CLK),
								  .D_IN(casContextRetryQ_enqQ$D_IN),
								  .ENQ(casContextRetryQ_enqQ$ENQ),
								  .DEQ(casContextRetryQ_enqQ$DEQ),
								  .CLR(casContextRetryQ_enqQ$CLR),
								  .D_OUT(casContextRetryQ_enqQ$D_OUT),
								  .FULL_N(casContextRetryQ_enqQ$FULL_N),
								  .EMPTY_N(casContextRetryQ_enqQ$EMPTY_N));

  // submodule casContextRetryQ_fifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd129),
	  .MEMSIZE(10'd512)) casContextRetryQ_fifo_memory(.CLKA(CLK),
							  .CLKB(CLK),
							  .ADDRA(casContextRetryQ_fifo_memory$ADDRA),
							  .ADDRB(casContextRetryQ_fifo_memory$ADDRB),
							  .DIA(casContextRetryQ_fifo_memory$DIA),
							  .DIB(casContextRetryQ_fifo_memory$DIB),
							  .WEA(casContextRetryQ_fifo_memory$WEA),
							  .WEB(casContextRetryQ_fifo_memory$WEB),
							  .ENA(casContextRetryQ_fifo_memory$ENA),
							  .ENB(casContextRetryQ_fifo_memory$ENB),
							  .DOA(),
							  .DOB(casContextRetryQ_fifo_memory$DOB));

  // submodule casContextRetryStallQ_deqQ
  FIFO2 #(.width(32'd8),
	  .guarded(32'd1)) casContextRetryStallQ_deqQ(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(casContextRetryStallQ_deqQ$D_IN),
						      .ENQ(casContextRetryStallQ_deqQ$ENQ),
						      .DEQ(casContextRetryStallQ_deqQ$DEQ),
						      .CLR(casContextRetryStallQ_deqQ$CLR),
						      .D_OUT(casContextRetryStallQ_deqQ$D_OUT),
						      .FULL_N(casContextRetryStallQ_deqQ$FULL_N),
						      .EMPTY_N(casContextRetryStallQ_deqQ$EMPTY_N));

  // submodule casContextRetryStallQ_enqQ
  FIFO2 #(.width(32'd8),
	  .guarded(32'd1)) casContextRetryStallQ_enqQ(.RST(RST_N),
						      .CLK(CLK),
						      .D_IN(casContextRetryStallQ_enqQ$D_IN),
						      .ENQ(casContextRetryStallQ_enqQ$ENQ),
						      .DEQ(casContextRetryStallQ_enqQ$DEQ),
						      .CLR(casContextRetryStallQ_enqQ$CLR),
						      .D_OUT(casContextRetryStallQ_enqQ$D_OUT),
						      .FULL_N(casContextRetryStallQ_enqQ$FULL_N),
						      .EMPTY_N(casContextRetryStallQ_enqQ$EMPTY_N));

  // submodule casContextRetryStallQ_fifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd8),
	  .MEMSIZE(10'd512)) casContextRetryStallQ_fifo_memory(.CLKA(CLK),
							       .CLKB(CLK),
							       .ADDRA(casContextRetryStallQ_fifo_memory$ADDRA),
							       .ADDRB(casContextRetryStallQ_fifo_memory$ADDRB),
							       .DIA(casContextRetryStallQ_fifo_memory$DIA),
							       .DIB(casContextRetryStallQ_fifo_memory$DIB),
							       .WEA(casContextRetryStallQ_fifo_memory$WEA),
							       .WEB(casContextRetryStallQ_fifo_memory$WEB),
							       .ENA(casContextRetryStallQ_fifo_memory$ENA),
							       .ENB(casContextRetryStallQ_fifo_memory$ENB),
							       .DOA(),
							       .DOB(casContextRetryStallQ_fifo_memory$DOB));

  // submodule casNumInFlight
  mkCCounter casNumInFlight(.CLK(CLK),
			    .RST_N(RST_N),
			    .init_val(casNumInFlight$init_val),
			    .EN_init(casNumInFlight$EN_init),
			    .EN_inc(casNumInFlight$EN_inc),
			    .EN_dec(casNumInFlight$EN_dec),
			    .EN_dec2(casNumInFlight$EN_dec2),
			    .RDY_init(),
			    .RDY_inc(),
			    .RDY_dec(),
			    .RDY_dec2(),
			    .getVal(),
			    .RDY_getVal(),
			    .notZero(),
			    .RDY_notZero(),
			    .notMax(casNumInFlight$notMax),
			    .RDY_notMax());

  // submodule graphCASReqQs_0
  FIFO2 #(.width(32'd97), .guarded(32'd1)) graphCASReqQs_0(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(graphCASReqQs_0$D_IN),
							   .ENQ(graphCASReqQs_0$ENQ),
							   .DEQ(graphCASReqQs_0$DEQ),
							   .CLR(graphCASReqQs_0$CLR),
							   .D_OUT(graphCASReqQs_0$D_OUT),
							   .FULL_N(graphCASReqQs_0$FULL_N),
							   .EMPTY_N(graphCASReqQs_0$EMPTY_N));

  // submodule graphCASRespQs_0
  FIFO2 #(.width(32'd33), .guarded(32'd1)) graphCASRespQs_0(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(graphCASRespQs_0$D_IN),
							    .ENQ(graphCASRespQs_0$ENQ),
							    .DEQ(graphCASRespQs_0$DEQ),
							    .CLR(graphCASRespQs_0$CLR),
							    .D_OUT(graphCASRespQs_0$D_OUT),
							    .FULL_N(graphCASRespQs_0$FULL_N),
							    .EMPTY_N(graphCASRespQs_0$EMPTY_N));

  // submodule graphEdgeReqQs_0
  FIFO2 #(.width(32'd32), .guarded(32'd1)) graphEdgeReqQs_0(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(graphEdgeReqQs_0$D_IN),
							    .ENQ(graphEdgeReqQs_0$ENQ),
							    .DEQ(graphEdgeReqQs_0$DEQ),
							    .CLR(graphEdgeReqQs_0$CLR),
							    .D_OUT(graphEdgeReqQs_0$D_OUT),
							    .FULL_N(graphEdgeReqQs_0$FULL_N),
							    .EMPTY_N(graphEdgeReqQs_0$EMPTY_N));

  // submodule graphEdgeRespQs_0
  FIFO2 #(.width(32'd64), .guarded(32'd1)) graphEdgeRespQs_0(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(graphEdgeRespQs_0$D_IN),
							     .ENQ(graphEdgeRespQs_0$ENQ),
							     .DEQ(graphEdgeRespQs_0$DEQ),
							     .CLR(graphEdgeRespQs_0$CLR),
							     .D_OUT(graphEdgeRespQs_0$D_OUT),
							     .FULL_N(graphEdgeRespQs_0$FULL_N),
							     .EMPTY_N(graphEdgeRespQs_0$EMPTY_N));

  // submodule graphNodeQ0_deqQ
  FIFO2 #(.width(32'd1), .guarded(32'd1)) graphNodeQ0_deqQ(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(graphNodeQ0_deqQ$D_IN),
							   .ENQ(graphNodeQ0_deqQ$ENQ),
							   .DEQ(graphNodeQ0_deqQ$DEQ),
							   .CLR(graphNodeQ0_deqQ$CLR),
							   .D_OUT(graphNodeQ0_deqQ$D_OUT),
							   .FULL_N(graphNodeQ0_deqQ$FULL_N),
							   .EMPTY_N(graphNodeQ0_deqQ$EMPTY_N));

  // submodule graphNodeQ0_enqQ
  FIFO2 #(.width(32'd1), .guarded(32'd1)) graphNodeQ0_enqQ(.RST(RST_N),
							   .CLK(CLK),
							   .D_IN(graphNodeQ0_enqQ$D_IN),
							   .ENQ(graphNodeQ0_enqQ$ENQ),
							   .DEQ(graphNodeQ0_enqQ$DEQ),
							   .CLR(graphNodeQ0_enqQ$CLR),
							   .D_OUT(graphNodeQ0_enqQ$D_OUT),
							   .FULL_N(graphNodeQ0_enqQ$FULL_N),
							   .EMPTY_N(graphNodeQ0_enqQ$EMPTY_N));

  // submodule graphNodeQ0_fifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd1),
	  .MEMSIZE(11'd1024)) graphNodeQ0_fifo_memory(.CLKA(CLK),
						      .CLKB(CLK),
						      .ADDRA(graphNodeQ0_fifo_memory$ADDRA),
						      .ADDRB(graphNodeQ0_fifo_memory$ADDRB),
						      .DIA(graphNodeQ0_fifo_memory$DIA),
						      .DIB(graphNodeQ0_fifo_memory$DIB),
						      .WEA(graphNodeQ0_fifo_memory$WEA),
						      .WEB(graphNodeQ0_fifo_memory$WEB),
						      .ENA(graphNodeQ0_fifo_memory$ENA),
						      .ENB(graphNodeQ0_fifo_memory$ENB),
						      .DOA(),
						      .DOB(graphNodeQ0_fifo_memory$DOB));

  // submodule graphNodeQ1_deqQ
  FIFO2 #(.width(32'd129), .guarded(32'd1)) graphNodeQ1_deqQ(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(graphNodeQ1_deqQ$D_IN),
							     .ENQ(graphNodeQ1_deqQ$ENQ),
							     .DEQ(graphNodeQ1_deqQ$DEQ),
							     .CLR(graphNodeQ1_deqQ$CLR),
							     .D_OUT(graphNodeQ1_deqQ$D_OUT),
							     .FULL_N(graphNodeQ1_deqQ$FULL_N),
							     .EMPTY_N(graphNodeQ1_deqQ$EMPTY_N));

  // submodule graphNodeQ1_enqQ
  FIFO2 #(.width(32'd129), .guarded(32'd1)) graphNodeQ1_enqQ(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(graphNodeQ1_enqQ$D_IN),
							     .ENQ(graphNodeQ1_enqQ$ENQ),
							     .DEQ(graphNodeQ1_enqQ$DEQ),
							     .CLR(graphNodeQ1_enqQ$CLR),
							     .D_OUT(graphNodeQ1_enqQ$D_OUT),
							     .FULL_N(graphNodeQ1_enqQ$FULL_N),
							     .EMPTY_N(graphNodeQ1_enqQ$EMPTY_N));

  // submodule graphNodeQ1_fifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd129),
	  .MEMSIZE(10'd512)) graphNodeQ1_fifo_memory(.CLKA(CLK),
						     .CLKB(CLK),
						     .ADDRA(graphNodeQ1_fifo_memory$ADDRA),
						     .ADDRB(graphNodeQ1_fifo_memory$ADDRB),
						     .DIA(graphNodeQ1_fifo_memory$DIA),
						     .DIB(graphNodeQ1_fifo_memory$DIB),
						     .WEA(graphNodeQ1_fifo_memory$WEA),
						     .WEB(graphNodeQ1_fifo_memory$WEB),
						     .ENA(graphNodeQ1_fifo_memory$ENA),
						     .ENB(graphNodeQ1_fifo_memory$ENB),
						     .DOA(),
						     .DOB(graphNodeQ1_fifo_memory$DOB));

  // submodule graphNodeQ2_deqQ
  FIFO2 #(.width(32'd129), .guarded(32'd1)) graphNodeQ2_deqQ(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(graphNodeQ2_deqQ$D_IN),
							     .ENQ(graphNodeQ2_deqQ$ENQ),
							     .DEQ(graphNodeQ2_deqQ$DEQ),
							     .CLR(graphNodeQ2_deqQ$CLR),
							     .D_OUT(graphNodeQ2_deqQ$D_OUT),
							     .FULL_N(graphNodeQ2_deqQ$FULL_N),
							     .EMPTY_N(graphNodeQ2_deqQ$EMPTY_N));

  // submodule graphNodeQ2_enqQ
  FIFO2 #(.width(32'd129), .guarded(32'd1)) graphNodeQ2_enqQ(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(graphNodeQ2_enqQ$D_IN),
							     .ENQ(graphNodeQ2_enqQ$ENQ),
							     .DEQ(graphNodeQ2_enqQ$DEQ),
							     .CLR(graphNodeQ2_enqQ$CLR),
							     .D_OUT(graphNodeQ2_enqQ$D_OUT),
							     .FULL_N(graphNodeQ2_enqQ$FULL_N),
							     .EMPTY_N(graphNodeQ2_enqQ$EMPTY_N));

  // submodule graphNodeQ2_fifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd9),
	  .DATA_WIDTH(32'd129),
	  .MEMSIZE(10'd512)) graphNodeQ2_fifo_memory(.CLKA(CLK),
						     .CLKB(CLK),
						     .ADDRA(graphNodeQ2_fifo_memory$ADDRA),
						     .ADDRB(graphNodeQ2_fifo_memory$ADDRB),
						     .DIA(graphNodeQ2_fifo_memory$DIA),
						     .DIB(graphNodeQ2_fifo_memory$DIB),
						     .WEA(graphNodeQ2_fifo_memory$WEA),
						     .WEB(graphNodeQ2_fifo_memory$WEB),
						     .ENA(graphNodeQ2_fifo_memory$ENA),
						     .ENB(graphNodeQ2_fifo_memory$ENB),
						     .DOA(),
						     .DOB(graphNodeQ2_fifo_memory$DOB));

  // submodule graphNodeReqQs_0
  FIFO2 #(.width(32'd33), .guarded(32'd1)) graphNodeReqQs_0(.RST(RST_N),
							    .CLK(CLK),
							    .D_IN(graphNodeReqQs_0$D_IN),
							    .ENQ(graphNodeReqQs_0$ENQ),
							    .DEQ(graphNodeReqQs_0$DEQ),
							    .CLR(graphNodeReqQs_0$CLR),
							    .D_OUT(graphNodeReqQs_0$D_OUT),
							    .FULL_N(graphNodeReqQs_0$FULL_N),
							    .EMPTY_N(graphNodeReqQs_0$EMPTY_N));

  // submodule graphNodeRespQs_0
  FIFO2 #(.width(32'd128), .guarded(32'd1)) graphNodeRespQs_0(.RST(RST_N),
							      .CLK(CLK),
							      .D_IN(graphNodeRespQs_0$D_IN),
							      .ENQ(graphNodeRespQs_0$ENQ),
							      .DEQ(graphNodeRespQs_0$DEQ),
							      .CLR(graphNodeRespQs_0$CLR),
							      .D_OUT(graphNodeRespQs_0$D_OUT),
							      .FULL_N(graphNodeRespQs_0$FULL_N),
							      .EMPTY_N(graphNodeRespQs_0$EMPTY_N));

  // submodule graphPartialNodeReqQs_0
  FIFO2 #(.width(32'd97),
	  .guarded(32'd1)) graphPartialNodeReqQs_0(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(graphPartialNodeReqQs_0$D_IN),
						   .ENQ(graphPartialNodeReqQs_0$ENQ),
						   .DEQ(graphPartialNodeReqQs_0$DEQ),
						   .CLR(graphPartialNodeReqQs_0$CLR),
						   .D_OUT(graphPartialNodeReqQs_0$D_OUT),
						   .FULL_N(graphPartialNodeReqQs_0$FULL_N),
						   .EMPTY_N(graphPartialNodeReqQs_0$EMPTY_N));

  // submodule graphPartialNodeRespQs_0
  FIFO2 #(.width(32'd64),
	  .guarded(32'd1)) graphPartialNodeRespQs_0(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(graphPartialNodeRespQs_0$D_IN),
						    .ENQ(graphPartialNodeRespQs_0$ENQ),
						    .DEQ(graphPartialNodeRespQs_0$DEQ),
						    .CLR(graphPartialNodeRespQs_0$CLR),
						    .D_OUT(graphPartialNodeRespQs_0$D_OUT),
						    .FULL_N(graphPartialNodeRespQs_0$FULL_N),
						    .EMPTY_N(graphPartialNodeRespQs_0$EMPTY_N));

  // submodule newDistProcQ_deqQ
  FIFO2 #(.width(32'd33), .guarded(32'd1)) newDistProcQ_deqQ(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(newDistProcQ_deqQ$D_IN),
							     .ENQ(newDistProcQ_deqQ$ENQ),
							     .DEQ(newDistProcQ_deqQ$DEQ),
							     .CLR(newDistProcQ_deqQ$CLR),
							     .D_OUT(newDistProcQ_deqQ$D_OUT),
							     .FULL_N(newDistProcQ_deqQ$FULL_N),
							     .EMPTY_N(newDistProcQ_deqQ$EMPTY_N));

  // submodule newDistProcQ_enqQ
  FIFO2 #(.width(32'd33), .guarded(32'd1)) newDistProcQ_enqQ(.RST(RST_N),
							     .CLK(CLK),
							     .D_IN(newDistProcQ_enqQ$D_IN),
							     .ENQ(newDistProcQ_enqQ$ENQ),
							     .DEQ(newDistProcQ_enqQ$DEQ),
							     .CLR(newDistProcQ_enqQ$CLR),
							     .D_OUT(newDistProcQ_enqQ$D_OUT),
							     .FULL_N(newDistProcQ_enqQ$FULL_N),
							     .EMPTY_N(newDistProcQ_enqQ$EMPTY_N));

  // submodule newDistProcQ_fifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd33),
	  .MEMSIZE(11'd1024)) newDistProcQ_fifo_memory(.CLKA(CLK),
						       .CLKB(CLK),
						       .ADDRA(newDistProcQ_fifo_memory$ADDRA),
						       .ADDRB(newDistProcQ_fifo_memory$ADDRB),
						       .DIA(newDistProcQ_fifo_memory$DIA),
						       .DIB(newDistProcQ_fifo_memory$DIB),
						       .WEA(newDistProcQ_fifo_memory$WEA),
						       .WEB(newDistProcQ_fifo_memory$WEB),
						       .ENA(newDistProcQ_fifo_memory$ENA),
						       .ENB(newDistProcQ_fifo_memory$ENB),
						       .DOA(),
						       .DOB(newDistProcQ_fifo_memory$DOB));

  // submodule newDistQ_deqQ
  FIFO2 #(.width(32'd32), .guarded(32'd1)) newDistQ_deqQ(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(newDistQ_deqQ$D_IN),
							 .ENQ(newDistQ_deqQ$ENQ),
							 .DEQ(newDistQ_deqQ$DEQ),
							 .CLR(newDistQ_deqQ$CLR),
							 .D_OUT(newDistQ_deqQ$D_OUT),
							 .FULL_N(newDistQ_deqQ$FULL_N),
							 .EMPTY_N(newDistQ_deqQ$EMPTY_N));

  // submodule newDistQ_enqQ
  FIFO2 #(.width(32'd32), .guarded(32'd1)) newDistQ_enqQ(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(newDistQ_enqQ$D_IN),
							 .ENQ(newDistQ_enqQ$ENQ),
							 .DEQ(newDistQ_enqQ$DEQ),
							 .CLR(newDistQ_enqQ$CLR),
							 .D_OUT(newDistQ_enqQ$D_OUT),
							 .FULL_N(newDistQ_enqQ$FULL_N),
							 .EMPTY_N(newDistQ_enqQ$EMPTY_N));

  // submodule newDistQ_fifo_memory
  BRAM2 #(.PIPELINED(1'd0),
	  .ADDR_WIDTH(32'd10),
	  .DATA_WIDTH(32'd32),
	  .MEMSIZE(11'd1024)) newDistQ_fifo_memory(.CLKA(CLK),
						   .CLKB(CLK),
						   .ADDRA(newDistQ_fifo_memory$ADDRA),
						   .ADDRB(newDistQ_fifo_memory$ADDRB),
						   .DIA(newDistQ_fifo_memory$DIA),
						   .DIB(newDistQ_fifo_memory$DIB),
						   .WEA(newDistQ_fifo_memory$WEA),
						   .WEB(newDistQ_fifo_memory$WEB),
						   .ENA(newDistQ_fifo_memory$ENA),
						   .ENB(newDistQ_fifo_memory$ENB),
						   .DOA(),
						   .DOB(newDistQ_fifo_memory$DOB));

  // submodule workInQ
  FIFO2 #(.width(32'd64), .guarded(32'd1)) workInQ(.RST(RST_N),
						   .CLK(CLK),
						   .D_IN(workInQ$D_IN),
						   .ENQ(workInQ$ENQ),
						   .DEQ(workInQ$DEQ),
						   .CLR(workInQ$CLR),
						   .D_OUT(workInQ$D_OUT),
						   .FULL_N(workInQ$FULL_N),
						   .EMPTY_N(workInQ$EMPTY_N));

  // submodule workOutQ
  FIFO2 #(.width(32'd64), .guarded(32'd1)) workOutQ(.RST(RST_N),
						    .CLK(CLK),
						    .D_IN(workOutQ$D_IN),
						    .ENQ(workOutQ$ENQ),
						    .DEQ(workOutQ$DEQ),
						    .CLR(workOutQ$CLR),
						    .D_OUT(workOutQ$D_OUT),
						    .FULL_N(workOutQ$FULL_N),
						    .EMPTY_N(workOutQ$EMPTY_N));

  // rule RL_getSrcNode
  assign WILL_FIRE_RL_getSrcNode = started && graphNodeReqQs_0$FULL_N ;

  // rule RL_recvSrcNode
  assign WILL_FIRE_RL_recvSrcNode =
	     graphNodeRespQs_0$EMPTY_N && graphNodeQ0_deqQ$EMPTY_N &&
	     (graphNodeRespQs_0$D_OUT[95:64] == 32'd0 ||
	      graphNodeQ1_enqQ$FULL_N) ;

  // rule RL_getEdges
  assign WILL_FIRE_RL_getEdges =
	     !graphNodeQ1_deqQ$EMPTY_N || !graphEdgeReqQs_0$FULL_N ||
	     graphNodeQ2_enqQ$FULL_N ;

  // rule RL_casRetryDeq
  assign WILL_FIRE_RL_casRetryDeq =
	     casContextRetryQ_deqQ$EMPTY_N &&
	     casContextRetryStallQ_deqQ$EMPTY_N &&
	     casRetryWait ;

  // rule RL_casRetry
  assign WILL_FIRE_RL_casRetry =
	     (casRetryStall != 8'd0 || casContextQ1$FULL_N) &&
	     !casRetryWait &&
	     started &&
	     !WILL_FIRE_RL_recvDestNode ;

  // rule RL_recvDestNode
  assign WILL_FIRE_RL_recvDestNode =
	     casContextQ1$FULL_N && graphPartialNodeRespQs_0$EMPTY_N &&
	     newDistQ_deqQ$EMPTY_N &&
	     newDistProcQ_deqQ$EMPTY_N &&
	     casNumInFlight$notMax ;

  // rule RL_cas
  assign WILL_FIRE_RL_cas =
	     casContextQ1$EMPTY_N &&
	     (!casContextQ1_first__18_BITS_96_TO_65_19_ULT_ca_ETC___d521 ||
	      graphCASReqQs_0$FULL_N && casContextQ2_enqQ$FULL_N) ;

  // rule RL_casDone
  assign WILL_FIRE_RL_casDone =
	     graphCASRespQs_0$EMPTY_N && casContextQ2_deqQ$EMPTY_N &&
	     IF_graphCASRespQs_0_first__37_BIT_32_38_THEN_c_ETC___d552 ;

  // inputs to muxes for submodule ports
  assign MUX_casContextQ1$enq_1__SEL_1 =
	     WILL_FIRE_RL_casRetry && casRetryStall == 8'd0 ;
  assign MUX_casRetryStall$write_1__SEL_1 =
	     WILL_FIRE_RL_casRetry && casRetryStall != 8'd0 ;
  assign MUX_lfsr_r$write_1__SEL_2 =
	     WILL_FIRE_RL_casDone && !graphCASRespQs_0$D_OUT[32] &&
	     casContextQ2_deqQ_first__39_BITS_96_TO_65_44_U_ETC___d546 ;
  assign MUX_numCASIssued$write_1__SEL_2 =
	     WILL_FIRE_RL_cas &&
	     casContextQ1_first__18_BITS_96_TO_65_19_ULT_ca_ETC___d521 ;
  assign MUX_numEdgesDiscarded$write_1__SEL_2 =
	     WILL_FIRE_RL_cas &&
	     !casContextQ1_first__18_BITS_96_TO_65_19_ULT_ca_ETC___d521 ;
  assign MUX_numEdgesFetched$write_1__SEL_2 =
	     WILL_FIRE_RL_getEdges && graphNodeQ1_deqQ$EMPTY_N &&
	     graphEdgeReqQs_0$FULL_N ;
  assign MUX_numEdgesRetired$write_1__SEL_2 =
	     WILL_FIRE_RL_casDone &&
	     (graphCASRespQs_0$D_OUT[32] ||
	      !casContextQ2_deqQ_first__39_BITS_96_TO_65_44_U_ETC___d546) ;
  assign MUX_numWorkFetched$write_1__SEL_2 =
	     WILL_FIRE_RL_getSrcNode && workInQ$EMPTY_N &&
	     graphNodeQ0_enqQ$FULL_N ;
  assign MUX_numWorkRetired$write_1__SEL_2 =
	     WILL_FIRE_RL_getEdges && graphNodeQ1_deqQ$EMPTY_N &&
	     graphEdgeReqQs_0$FULL_N &&
	     edgeIdx_49_EQ_graphNodeQ1_deqQ_first__47_BITS__ETC___d454 ;
  assign MUX_casContextQ1$enq_1__VAL_2 =
	     { graphPartialNodeRespQs_0$D_OUT[63:32],
	       newDistQ_deqQ$D_OUT,
	       newDistProcQ_deqQ$D_OUT[32:1],
	       graphPartialNodeRespQs_0$D_OUT[31:0],
	       newDistProcQ_deqQ$D_OUT[0] } ;
  assign MUX_casRetryStall$write_1__VAL_1 = casRetryStall - 8'd1 ;
  assign MUX_done$write_1__VAL_2 =
	     NOT_workInQ_notEmpty__87_88_AND_NOT_workOutQ_n_ETC___d397 &&
	     numEdgesFetched == numEdgesRetired + numEdgesDiscarded ;
  assign MUX_lfsr_r$write_1__VAL_1 = { 2'b0, init_fpgaId, init_laneId } ;
  assign MUX_lfsr_r$write_1__VAL_2 =
	     lfsr_r[0] ?
	       { 1'd1, lfsr_r[7:5], ~lfsr_r[4:2], lfsr_r[1] } :
	       { 1'd0, lfsr_r[7:1] } ;
  assign MUX_numCASIssued$write_1__VAL_2 = numCASIssued + 48'd1 ;
  assign MUX_numCASRetried$write_1__VAL_2 = numCASRetried + 64'd1 ;
  assign MUX_numEdgePipeStall$write_1__VAL_2 = numEdgePipeStall + 64'd1 ;
  assign MUX_numEdgesDiscarded$write_1__VAL_2 = numEdgesDiscarded + 48'd1 ;
  assign MUX_numEdgesFetched$write_1__VAL_2 = numEdgesFetched + 48'd1 ;
  assign MUX_numEdgesRetired$write_1__VAL_2 = numEdgesRetired + 48'd1 ;
  assign MUX_numWorkDiscarded$write_1__VAL_2 = numWorkDiscarded + 48'd1 ;
  assign MUX_numWorkFetched$write_1__VAL_2 = numWorkFetched + 48'd1 ;
  assign MUX_numWorkRetired$write_1__VAL_2 = numWorkRetired + 48'd1 ;
  assign MUX_numWorklistStall$write_1__VAL_2 = numWorklistStall + 64'd1 ;
  assign MUX_rg_totalBias$write_1__VAL_2 = x__h17524[31:0] + rg_bias ;

  // inlined wires
  assign graphNodeQ0_fifo_wDataOut$wget =
	     (graphNodeQ0_fifo_rCache[12] &&
	      graphNodeQ0_fifo_rCache[11:1] == graphNodeQ0_fifo_rRdPtr) ?
	       graphNodeQ0_fifo_rCache[0] :
	       graphNodeQ0_fifo_memory$DOB ;
  assign graphNodeQ1_fifo_wDataOut$wget =
	     (graphNodeQ1_fifo_rCache[139] &&
	      graphNodeQ1_fifo_rCache[138:129] == graphNodeQ1_fifo_rRdPtr) ?
	       graphNodeQ1_fifo_rCache[128:0] :
	       graphNodeQ1_fifo_memory$DOB ;
  assign graphNodeQ2_fifo_wDataOut$wget =
	     (graphNodeQ2_fifo_rCache[139] &&
	      graphNodeQ2_fifo_rCache[138:129] == graphNodeQ2_fifo_rRdPtr) ?
	       graphNodeQ2_fifo_rCache[128:0] :
	       graphNodeQ2_fifo_memory$DOB ;
  assign newDistQ_fifo_wDataOut$wget =
	     (newDistQ_fifo_rCache[43] &&
	      newDistQ_fifo_rCache[42:32] == newDistQ_fifo_rRdPtr) ?
	       newDistQ_fifo_rCache[31:0] :
	       newDistQ_fifo_memory$DOB ;
  assign newDistProcQ_fifo_wDataOut$wget =
	     (newDistProcQ_fifo_rCache[44] &&
	      newDistProcQ_fifo_rCache[43:33] == newDistProcQ_fifo_rRdPtr) ?
	       newDistProcQ_fifo_rCache[32:0] :
	       newDistProcQ_fifo_memory$DOB ;
  assign casContextQ2_fifo_wDataOut$wget =
	     (casContextQ2_fifo_rCache[140] &&
	      casContextQ2_fifo_rCache[139:129] == casContextQ2_fifo_rRdPtr) ?
	       casContextQ2_fifo_rCache[128:0] :
	       casContextQ2_fifo_memory$DOB ;
  assign casContextRetryQ_fifo_wDataOut$wget =
	     (casContextRetryQ_fifo_rCache[139] &&
	      casContextRetryQ_fifo_rCache[138:129] ==
	      casContextRetryQ_fifo_rRdPtr) ?
	       casContextRetryQ_fifo_rCache[128:0] :
	       casContextRetryQ_fifo_memory$DOB ;
  assign casContextRetryStallQ_fifo_wDataOut$wget =
	     (casContextRetryStallQ_fifo_rCache[18] &&
	      casContextRetryStallQ_fifo_rCache[17:8] ==
	      casContextRetryStallQ_fifo_rRdPtr) ?
	       casContextRetryStallQ_fifo_rCache[7:0] :
	       casContextRetryStallQ_fifo_memory$DOB ;
  assign graphNodeQ0_fifo_pwDequeue$whas =
	     graphNodeQ0_fifo_rRdPtr != graphNodeQ0_fifo_rWrPtr &&
	     graphNodeQ0_deqQ$FULL_N ;
  assign graphNodeQ0_fifo_pwEnqueue$whas =
	     graphNodeQ0_fifo_rRdPtr + 11'd512 != graphNodeQ0_fifo_rWrPtr &&
	     graphNodeQ0_enqQ$EMPTY_N ;
  assign graphNodeQ1_fifo_pwDequeue$whas =
	     graphNodeQ1_fifo_rRdPtr != graphNodeQ1_fifo_rWrPtr &&
	     graphNodeQ1_deqQ$FULL_N ;
  assign graphNodeQ1_fifo_pwEnqueue$whas =
	     graphNodeQ1_fifo_rRdPtr + 10'd256 != graphNodeQ1_fifo_rWrPtr &&
	     graphNodeQ1_enqQ$EMPTY_N ;
  assign graphNodeQ2_fifo_pwDequeue$whas =
	     graphNodeQ2_fifo_rRdPtr != graphNodeQ2_fifo_rWrPtr &&
	     graphNodeQ2_deqQ$FULL_N ;
  assign graphNodeQ2_fifo_pwEnqueue$whas =
	     graphNodeQ2_fifo_rRdPtr + 10'd256 != graphNodeQ2_fifo_rWrPtr &&
	     graphNodeQ2_enqQ$EMPTY_N ;
  assign newDistQ_fifo_pwDequeue$whas =
	     newDistQ_fifo_rRdPtr != newDistQ_fifo_rWrPtr &&
	     newDistQ_deqQ$FULL_N ;
  assign newDistQ_fifo_pwEnqueue$whas =
	     newDistQ_fifo_rRdPtr + 11'd512 != newDistQ_fifo_rWrPtr &&
	     newDistQ_enqQ$EMPTY_N ;
  assign newDistProcQ_fifo_pwDequeue$whas =
	     newDistProcQ_fifo_rRdPtr != newDistProcQ_fifo_rWrPtr &&
	     newDistProcQ_deqQ$FULL_N ;
  assign newDistProcQ_fifo_pwEnqueue$whas =
	     newDistProcQ_fifo_rRdPtr + 11'd512 != newDistProcQ_fifo_rWrPtr &&
	     newDistProcQ_enqQ$EMPTY_N ;
  assign casContextQ2_fifo_pwDequeue$whas =
	     casContextQ2_fifo_rRdPtr != casContextQ2_fifo_rWrPtr &&
	     casContextQ2_deqQ$FULL_N ;
  assign casContextQ2_fifo_pwEnqueue$whas =
	     casContextQ2_fifo_rRdPtr + 11'd512 != casContextQ2_fifo_rWrPtr &&
	     casContextQ2_enqQ$EMPTY_N ;
  assign casContextRetryQ_fifo_pwDequeue$whas =
	     casContextRetryQ_fifo_rRdPtr != casContextRetryQ_fifo_rWrPtr &&
	     casContextRetryQ_deqQ$FULL_N ;
  assign casContextRetryQ_fifo_pwEnqueue$whas =
	     casContextRetryQ_fifo_rRdPtr + 10'd256 !=
	     casContextRetryQ_fifo_rWrPtr &&
	     casContextRetryQ_enqQ$EMPTY_N ;
  assign casContextRetryStallQ_fifo_pwDequeue$whas =
	     casContextRetryStallQ_fifo_rRdPtr !=
	     casContextRetryStallQ_fifo_rWrPtr &&
	     casContextRetryStallQ_deqQ$FULL_N ;
  assign casContextRetryStallQ_fifo_pwEnqueue$whas =
	     casContextRetryStallQ_fifo_rRdPtr + 10'd256 !=
	     casContextRetryStallQ_fifo_rWrPtr &&
	     casContextRetryStallQ_enqQ$EMPTY_N ;

  // register casContextQ2_fifo_rCache
  assign casContextQ2_fifo_rCache$D_IN =
	     { 1'd1,
	       casContextQ2_fifo_rWrPtr,
	       x__h10031,
	       x__h9931,
	       x__h9954,
	       x__h9976,
	       x__read_snd_snd_procId__h9969 } ;
  assign casContextQ2_fifo_rCache$EN = casContextQ2_fifo_pwEnqueue$whas ;

  // register casContextQ2_fifo_rRdPtr
  assign casContextQ2_fifo_rRdPtr$D_IN = x__h10194 ;
  assign casContextQ2_fifo_rRdPtr$EN = casContextQ2_fifo_pwDequeue$whas ;

  // register casContextQ2_fifo_rWrPtr
  assign casContextQ2_fifo_rWrPtr$D_IN = x__h10048 ;
  assign casContextQ2_fifo_rWrPtr$EN = casContextQ2_fifo_pwEnqueue$whas ;

  // register casContextRetryQ_fifo_rCache
  assign casContextRetryQ_fifo_rCache$D_IN =
	     { 1'd1,
	       casContextRetryQ_fifo_rWrPtr,
	       x__h11603,
	       x__h11508,
	       x__h11526,
	       x__h11548,
	       x__read_snd_snd_procId__h11541 } ;
  assign casContextRetryQ_fifo_rCache$EN =
	     casContextRetryQ_fifo_pwEnqueue$whas ;

  // register casContextRetryQ_fifo_rRdPtr
  assign casContextRetryQ_fifo_rRdPtr$D_IN = x__h11766 ;
  assign casContextRetryQ_fifo_rRdPtr$EN =
	     casContextRetryQ_fifo_pwDequeue$whas ;

  // register casContextRetryQ_fifo_rWrPtr
  assign casContextRetryQ_fifo_rWrPtr$D_IN = x__h11620 ;
  assign casContextRetryQ_fifo_rWrPtr$EN =
	     casContextRetryQ_fifo_pwEnqueue$whas ;

  // register casContextRetryStallQ_fifo_rCache
  assign casContextRetryStallQ_fifo_rCache$D_IN =
	     { 1'd1, casContextRetryStallQ_fifo_rWrPtr, x3__h13037 } ;
  assign casContextRetryStallQ_fifo_rCache$EN =
	     casContextRetryStallQ_fifo_pwEnqueue$whas ;

  // register casContextRetryStallQ_fifo_rRdPtr
  assign casContextRetryStallQ_fifo_rRdPtr$D_IN = x__h13222 ;
  assign casContextRetryStallQ_fifo_rRdPtr$EN =
	     casContextRetryStallQ_fifo_pwDequeue$whas ;

  // register casContextRetryStallQ_fifo_rWrPtr
  assign casContextRetryStallQ_fifo_rWrPtr$D_IN = x__h13120 ;
  assign casContextRetryStallQ_fifo_rWrPtr$EN =
	     casContextRetryStallQ_fifo_pwEnqueue$whas ;

  // register casRetryPkt
  assign casRetryPkt$D_IN = casContextRetryQ_deqQ$D_OUT ;
  assign casRetryPkt$EN = WILL_FIRE_RL_casRetryDeq ;

  // register casRetryStall
  assign casRetryStall$D_IN =
	     MUX_casRetryStall$write_1__SEL_1 ?
	       MUX_casRetryStall$write_1__VAL_1 :
	       casContextRetryStallQ_deqQ$D_OUT ;
  assign casRetryStall$EN =
	     WILL_FIRE_RL_casRetry && casRetryStall != 8'd0 ||
	     WILL_FIRE_RL_casRetryDeq ;

  // register casRetryWait
  assign casRetryWait$D_IN = MUX_casContextQ1$enq_1__SEL_1 ;
  assign casRetryWait$EN =
	     WILL_FIRE_RL_casRetry && casRetryStall == 8'd0 ||
	     WILL_FIRE_RL_casRetryDeq ;

  // register done
  assign done$D_IN = !EN_init && MUX_done$write_1__VAL_2 ;
  assign done$EN = started || EN_init ;

  // register edgeIdx
  assign edgeIdx$D_IN =
	     edgeIdx_49_EQ_graphNodeQ1_deqQ_first__47_BITS__ETC___d454 ?
	       32'd0 :
	       x__h15887 ;
  assign edgeIdx$EN = MUX_numEdgesFetched$write_1__SEL_2 ;

  // register fpgaId
  assign fpgaId$D_IN = init_fpgaId ;
  assign fpgaId$EN = EN_init ;

  // register graphNodeQ0_fifo_rCache
  assign graphNodeQ0_fifo_rCache$D_IN =
	     { 1'd1, graphNodeQ0_fifo_rWrPtr, x__h2809 } ;
  assign graphNodeQ0_fifo_rCache$EN = graphNodeQ0_fifo_pwEnqueue$whas ;

  // register graphNodeQ0_fifo_rRdPtr
  assign graphNodeQ0_fifo_rRdPtr$D_IN = x__h2919 ;
  assign graphNodeQ0_fifo_rRdPtr$EN = graphNodeQ0_fifo_pwDequeue$whas ;

  // register graphNodeQ0_fifo_rWrPtr
  assign graphNodeQ0_fifo_rWrPtr$D_IN = x__h2817 ;
  assign graphNodeQ0_fifo_rWrPtr$EN = graphNodeQ0_fifo_pwEnqueue$whas ;

  // register graphNodeQ1_fifo_rCache
  assign graphNodeQ1_fifo_rCache$D_IN =
	     { 1'd1,
	       graphNodeQ1_fifo_rWrPtr,
	       IF_graphNodeQ1_fifo_wDataIn_whas__2_THEN_graph_ETC___d55,
	       x__read_procId__h4079 } ;
  assign graphNodeQ1_fifo_rCache$EN = graphNodeQ1_fifo_pwEnqueue$whas ;

  // register graphNodeQ1_fifo_rRdPtr
  assign graphNodeQ1_fifo_rRdPtr$D_IN = x__h4320 ;
  assign graphNodeQ1_fifo_rRdPtr$EN = graphNodeQ1_fifo_pwDequeue$whas ;

  // register graphNodeQ1_fifo_rWrPtr
  assign graphNodeQ1_fifo_rWrPtr$D_IN = x__h4188 ;
  assign graphNodeQ1_fifo_rWrPtr$EN = graphNodeQ1_fifo_pwEnqueue$whas ;

  // register graphNodeQ2_fifo_rCache
  assign graphNodeQ2_fifo_rCache$D_IN =
	     { 1'd1,
	       graphNodeQ2_fifo_rWrPtr,
	       IF_graphNodeQ2_fifo_wDataIn_whas__00_THEN_grap_ETC___d103,
	       x__read_procId__h5619 } ;
  assign graphNodeQ2_fifo_rCache$EN = graphNodeQ2_fifo_pwEnqueue$whas ;

  // register graphNodeQ2_fifo_rRdPtr
  assign graphNodeQ2_fifo_rRdPtr$D_IN = x__h5860 ;
  assign graphNodeQ2_fifo_rRdPtr$EN = graphNodeQ2_fifo_pwDequeue$whas ;

  // register graphNodeQ2_fifo_rWrPtr
  assign graphNodeQ2_fifo_rWrPtr$D_IN = x__h5728 ;
  assign graphNodeQ2_fifo_rWrPtr$EN = graphNodeQ2_fifo_pwEnqueue$whas ;

  // register laneId
  assign laneId$D_IN = init_laneId ;
  assign laneId$EN = EN_init ;

  // register lfsr_r
  assign lfsr_r$D_IN =
	     EN_init ? MUX_lfsr_r$write_1__VAL_1 : MUX_lfsr_r$write_1__VAL_2 ;
  assign lfsr_r$EN =
	     WILL_FIRE_RL_casDone && !graphCASRespQs_0$D_OUT[32] &&
	     casContextQ2_deqQ_first__39_BITS_96_TO_65_44_U_ETC___d546 ||
	     EN_init ;

  // register newDistProcQ_fifo_rCache
  assign newDistProcQ_fifo_rCache$D_IN =
	     { 1'd1,
	       newDistProcQ_fifo_rWrPtr,
	       x__read_id__h8462,
	       x__read_procId__h8463 } ;
  assign newDistProcQ_fifo_rCache$EN = newDistProcQ_fifo_pwEnqueue$whas ;

  // register newDistProcQ_fifo_rRdPtr
  assign newDistProcQ_fifo_rRdPtr$D_IN = x__h8631 ;
  assign newDistProcQ_fifo_rRdPtr$EN = newDistProcQ_fifo_pwDequeue$whas ;

  // register newDistProcQ_fifo_rWrPtr
  assign newDistProcQ_fifo_rWrPtr$D_IN = x__h8523 ;
  assign newDistProcQ_fifo_rWrPtr$EN = newDistProcQ_fifo_pwEnqueue$whas ;

  // register newDistQ_fifo_rCache
  assign newDistQ_fifo_rCache$D_IN =
	     { 1'd1, newDistQ_fifo_rWrPtr, x3__h7119 } ;
  assign newDistQ_fifo_rCache$EN = newDistQ_fifo_pwEnqueue$whas ;

  // register newDistQ_fifo_rRdPtr
  assign newDistQ_fifo_rRdPtr$D_IN = x__h7304 ;
  assign newDistQ_fifo_rRdPtr$EN = newDistQ_fifo_pwDequeue$whas ;

  // register newDistQ_fifo_rWrPtr
  assign newDistQ_fifo_rWrPtr$D_IN = x__h7202 ;
  assign newDistQ_fifo_rWrPtr$EN = newDistQ_fifo_pwEnqueue$whas ;

  // register numCASIssued
  assign numCASIssued$D_IN =
	     EN_init ? 48'd0 : MUX_numCASIssued$write_1__VAL_2 ;
  assign numCASIssued$EN =
	     WILL_FIRE_RL_cas &&
	     casContextQ1_first__18_BITS_96_TO_65_19_ULT_ca_ETC___d521 ||
	     EN_init ;

  // register numCASRetried
  assign numCASRetried$D_IN =
	     EN_init ? 64'd0 : MUX_numCASRetried$write_1__VAL_2 ;
  assign numCASRetried$EN =
	     WILL_FIRE_RL_casDone && !graphCASRespQs_0$D_OUT[32] &&
	     casContextQ2_deqQ_first__39_BITS_96_TO_65_44_U_ETC___d546 ||
	     EN_init ;

  // register numCasCxt1Full
  assign numCasCxt1Full$D_IN = 48'd0 ;
  assign numCasCxt1Full$EN = EN_init ;

  // register numCasCxt2Full
  assign numCasCxt2Full$D_IN = 48'd0 ;
  assign numCasCxt2Full$EN = EN_init ;

  // register numCasCxtRetryFull
  assign numCasCxtRetryFull$D_IN = 48'd0 ;
  assign numCasCxtRetryFull$EN = EN_init ;

  // register numCasCxtRetryStallFull
  assign numCasCxtRetryStallFull$D_IN = 48'd0 ;
  assign numCasCxtRetryStallFull$EN = EN_init ;

  // register numEdgePipeStall
  assign numEdgePipeStall$D_IN =
	     EN_init ? 64'd0 : MUX_numEdgePipeStall$write_1__VAL_2 ;
  assign numEdgePipeStall$EN =
	     WILL_FIRE_RL_getEdges && graphNodeQ1_deqQ$EMPTY_N &&
	     !graphEdgeReqQs_0$FULL_N ||
	     EN_init ;

  // register numEdgesDiscarded
  assign numEdgesDiscarded$D_IN =
	     EN_init ? 48'd0 : MUX_numEdgesDiscarded$write_1__VAL_2 ;
  assign numEdgesDiscarded$EN =
	     WILL_FIRE_RL_cas &&
	     !casContextQ1_first__18_BITS_96_TO_65_19_ULT_ca_ETC___d521 ||
	     EN_init ;

  // register numEdgesFetched
  assign numEdgesFetched$D_IN =
	     EN_init ? 48'd0 : MUX_numEdgesFetched$write_1__VAL_2 ;
  assign numEdgesFetched$EN =
	     WILL_FIRE_RL_getEdges && graphNodeQ1_deqQ$EMPTY_N &&
	     graphEdgeReqQs_0$FULL_N ||
	     EN_init ;

  // register numEdgesRetired
  assign numEdgesRetired$D_IN =
	     EN_init ? 48'd0 : MUX_numEdgesRetired$write_1__VAL_2 ;
  assign numEdgesRetired$EN =
	     WILL_FIRE_RL_casDone &&
	     (graphCASRespQs_0$D_OUT[32] ||
	      !casContextQ2_deqQ_first__39_BITS_96_TO_65_44_U_ETC___d546) ||
	     EN_init ;

  // register numGraphCASReqFull
  assign numGraphCASReqFull$D_IN = 48'd0 ;
  assign numGraphCASReqFull$EN = EN_init ;

  // register numGraphEdgeReqFull
  assign numGraphEdgeReqFull$D_IN = 48'd0 ;
  assign numGraphEdgeReqFull$EN = EN_init ;

  // register numGraphNode1Full
  assign numGraphNode1Full$D_IN = 48'd0 ;
  assign numGraphNode1Full$EN = EN_init ;

  // register numGraphNode2Full
  assign numGraphNode2Full$D_IN = 48'd0 ;
  assign numGraphNode2Full$EN = EN_init ;

  // register numGraphNodeReqFull
  assign numGraphNodeReqFull$D_IN = 48'd0 ;
  assign numGraphNodeReqFull$EN = EN_init ;

  // register numNewDistFull
  assign numNewDistFull$D_IN = 48'd0 ;
  assign numNewDistFull$EN = EN_init ;

  // register numWorkDiscarded
  assign numWorkDiscarded$D_IN =
	     EN_init ? 48'd0 : MUX_numWorkDiscarded$write_1__VAL_2 ;
  assign numWorkDiscarded$EN =
	     WILL_FIRE_RL_recvSrcNode &&
	     graphNodeRespQs_0$D_OUT[95:64] == 32'd0 ||
	     EN_init ;

  // register numWorkFetched
  assign numWorkFetched$D_IN =
	     EN_init ? 48'd0 : MUX_numWorkFetched$write_1__VAL_2 ;
  assign numWorkFetched$EN =
	     WILL_FIRE_RL_getSrcNode && workInQ$EMPTY_N &&
	     graphNodeQ0_enqQ$FULL_N ||
	     EN_init ;

  // register numWorkInEmpty
  assign numWorkInEmpty$D_IN = 48'd0 ;
  assign numWorkInEmpty$EN = EN_init ;

  // register numWorkOutFull
  assign numWorkOutFull$D_IN = 48'd0 ;
  assign numWorkOutFull$EN = EN_init ;

  // register numWorkRetired
  assign numWorkRetired$D_IN =
	     EN_init ? 48'd0 : MUX_numWorkRetired$write_1__VAL_2 ;
  assign numWorkRetired$EN =
	     WILL_FIRE_RL_getEdges && graphNodeQ1_deqQ$EMPTY_N &&
	     graphEdgeReqQs_0$FULL_N &&
	     edgeIdx_49_EQ_graphNodeQ1_deqQ_first__47_BITS__ETC___d454 ||
	     EN_init ;

  // register numWorklistStall
  assign numWorklistStall$D_IN =
	     EN_init ? 64'd0 : MUX_numWorklistStall$write_1__VAL_2 ;
  assign numWorklistStall$EN =
	     WILL_FIRE_RL_getEdges && !graphNodeQ1_deqQ$EMPTY_N || EN_init ;

  // register rg_bSize
  assign rg_bSize$D_IN = init_bSize ;
  assign rg_bSize$EN = EN_init ;

  // register rg_bias
  assign rg_bias$D_IN = init_bias ;
  assign rg_bias$EN = EN_init ;

  // register rg_offset
  assign rg_offset$D_IN = EN_setOffset ? setOffset_offset : 64'd0 ;
  assign rg_offset$EN = EN_setOffset || EN_init ;

  // register rg_totalBias
  assign rg_totalBias$D_IN =
	     EN_init ? init_bias : MUX_rg_totalBias$write_1__VAL_2 ;
  assign rg_totalBias$EN = EN_init || WILL_FIRE_RL_casDone ;

  // register started
  assign started$D_IN = EN_init ;
  assign started$EN = EN_stop || EN_init ;

  // submodule casContextQ1
  assign casContextQ1$D_IN =
	     MUX_casContextQ1$enq_1__SEL_1 ?
	       casRetryPkt :
	       MUX_casContextQ1$enq_1__VAL_2 ;
  assign casContextQ1$ENQ =
	     WILL_FIRE_RL_casRetry && casRetryStall == 8'd0 ||
	     WILL_FIRE_RL_recvDestNode ;
  assign casContextQ1$DEQ = WILL_FIRE_RL_cas ;
  assign casContextQ1$CLR = 1'b0 ;

  // submodule casContextQ2_deqQ
  assign casContextQ2_deqQ$D_IN = casContextQ2_fifo_wDataOut$wget ;
  assign casContextQ2_deqQ$ENQ = casContextQ2_fifo_pwDequeue$whas ;
  assign casContextQ2_deqQ$DEQ = WILL_FIRE_RL_casDone ;
  assign casContextQ2_deqQ$CLR = 1'b0 ;

  // submodule casContextQ2_enqQ
  assign casContextQ2_enqQ$D_IN = casContextQ1$D_OUT ;
  assign casContextQ2_enqQ$ENQ = MUX_numCASIssued$write_1__SEL_2 ;
  assign casContextQ2_enqQ$DEQ = casContextQ2_fifo_pwEnqueue$whas ;
  assign casContextQ2_enqQ$CLR = 1'b0 ;

  // submodule casContextQ2_fifo_memory
  assign casContextQ2_fifo_memory$ADDRA = casContextQ2_fifo_rWrPtr[9:0] ;
  assign casContextQ2_fifo_memory$ADDRB =
	     casContextQ2_fifo_pwDequeue$whas ?
	       x__h10194[9:0] :
	       casContextQ2_fifo_rRdPtr[9:0] ;
  assign casContextQ2_fifo_memory$DIA =
	     { x__h10031,
	       x__h9931,
	       x__h9954,
	       x__h9976,
	       x__read_snd_snd_procId__h9969 } ;
  assign casContextQ2_fifo_memory$DIB =
	     129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign casContextQ2_fifo_memory$WEA = casContextQ2_fifo_pwEnqueue$whas ;
  assign casContextQ2_fifo_memory$WEB = 1'd0 ;
  assign casContextQ2_fifo_memory$ENA = 1'b1 ;
  assign casContextQ2_fifo_memory$ENB = 1'b1 ;

  // submodule casContextRetryQ_deqQ
  assign casContextRetryQ_deqQ$D_IN = casContextRetryQ_fifo_wDataOut$wget ;
  assign casContextRetryQ_deqQ$ENQ = casContextRetryQ_fifo_pwDequeue$whas ;
  assign casContextRetryQ_deqQ$DEQ = WILL_FIRE_RL_casRetryDeq ;
  assign casContextRetryQ_deqQ$CLR = 1'b0 ;

  // submodule casContextRetryQ_enqQ
  assign casContextRetryQ_enqQ$D_IN =
	     { graphCASRespQs_0$D_OUT[31:0], casContextQ2_deqQ$D_OUT[96:0] } ;
  assign casContextRetryQ_enqQ$ENQ = MUX_lfsr_r$write_1__SEL_2 ;
  assign casContextRetryQ_enqQ$DEQ = casContextRetryQ_fifo_pwEnqueue$whas ;
  assign casContextRetryQ_enqQ$CLR = 1'b0 ;

  // submodule casContextRetryQ_fifo_memory
  assign casContextRetryQ_fifo_memory$ADDRA =
	     casContextRetryQ_fifo_rWrPtr[8:0] ;
  assign casContextRetryQ_fifo_memory$ADDRB =
	     casContextRetryQ_fifo_pwDequeue$whas ?
	       x__h11766[8:0] :
	       casContextRetryQ_fifo_rRdPtr[8:0] ;
  assign casContextRetryQ_fifo_memory$DIA =
	     { x__h11603,
	       x__h11508,
	       x__h11526,
	       x__h11548,
	       x__read_snd_snd_procId__h11541 } ;
  assign casContextRetryQ_fifo_memory$DIB =
	     129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign casContextRetryQ_fifo_memory$WEA =
	     casContextRetryQ_fifo_pwEnqueue$whas ;
  assign casContextRetryQ_fifo_memory$WEB = 1'd0 ;
  assign casContextRetryQ_fifo_memory$ENA = 1'b1 ;
  assign casContextRetryQ_fifo_memory$ENB = 1'b1 ;

  // submodule casContextRetryStallQ_deqQ
  assign casContextRetryStallQ_deqQ$D_IN =
	     casContextRetryStallQ_fifo_wDataOut$wget ;
  assign casContextRetryStallQ_deqQ$ENQ =
	     casContextRetryStallQ_fifo_pwDequeue$whas ;
  assign casContextRetryStallQ_deqQ$DEQ = WILL_FIRE_RL_casRetryDeq ;
  assign casContextRetryStallQ_deqQ$CLR = 1'b0 ;

  // submodule casContextRetryStallQ_enqQ
  assign casContextRetryStallQ_enqQ$D_IN = { 4'd0, lfsr_r[7:4] } ;
  assign casContextRetryStallQ_enqQ$ENQ = MUX_lfsr_r$write_1__SEL_2 ;
  assign casContextRetryStallQ_enqQ$DEQ =
	     casContextRetryStallQ_fifo_pwEnqueue$whas ;
  assign casContextRetryStallQ_enqQ$CLR = 1'b0 ;

  // submodule casContextRetryStallQ_fifo_memory
  assign casContextRetryStallQ_fifo_memory$ADDRA =
	     casContextRetryStallQ_fifo_rWrPtr[8:0] ;
  assign casContextRetryStallQ_fifo_memory$ADDRB =
	     casContextRetryStallQ_fifo_pwDequeue$whas ?
	       x__h13222[8:0] :
	       casContextRetryStallQ_fifo_rRdPtr[8:0] ;
  assign casContextRetryStallQ_fifo_memory$DIA = x3__h13037 ;
  assign casContextRetryStallQ_fifo_memory$DIB =
	     8'b10101010 /* unspecified value */  ;
  assign casContextRetryStallQ_fifo_memory$WEA =
	     casContextRetryStallQ_fifo_pwEnqueue$whas ;
  assign casContextRetryStallQ_fifo_memory$WEB = 1'd0 ;
  assign casContextRetryStallQ_fifo_memory$ENA = 1'b1 ;
  assign casContextRetryStallQ_fifo_memory$ENB = 1'b1 ;

  // submodule casNumInFlight
  assign casNumInFlight$init_val = 10'd512 ;
  assign casNumInFlight$EN_init = EN_init ;
  assign casNumInFlight$EN_inc = WILL_FIRE_RL_recvDestNode ;
  assign casNumInFlight$EN_dec = MUX_numEdgesDiscarded$write_1__SEL_2 ;
  assign casNumInFlight$EN_dec2 = MUX_numEdgesRetired$write_1__SEL_2 ;

  // submodule graphCASReqQs_0
  assign graphCASReqQs_0$D_IN =
	     { casContextQ1$D_OUT[64:33],
	       casContextQ1$D_OUT[128:65],
	       casContextQ1$D_OUT[0] } ;
  assign graphCASReqQs_0$ENQ = MUX_numCASIssued$write_1__SEL_2 ;
  assign graphCASReqQs_0$DEQ = EN_graphCASReqs_0_get ;
  assign graphCASReqQs_0$CLR = 1'b0 ;

  // submodule graphCASRespQs_0
  assign graphCASRespQs_0$D_IN = graphCASResps_0_put ;
  assign graphCASRespQs_0$ENQ = EN_graphCASResps_0_put ;
  assign graphCASRespQs_0$DEQ = WILL_FIRE_RL_casDone ;
  assign graphCASRespQs_0$CLR = 1'b0 ;

  // submodule graphEdgeReqQs_0
  assign graphEdgeReqQs_0$D_IN = graphNodeQ1_deqQ$D_OUT[32:1] + edgeIdx ;
  assign graphEdgeReqQs_0$ENQ = MUX_numEdgesFetched$write_1__SEL_2 ;
  assign graphEdgeReqQs_0$DEQ = EN_graphEdgeReqs_0_get ;
  assign graphEdgeReqQs_0$CLR = 1'b0 ;

  // submodule graphEdgeRespQs_0
  assign graphEdgeRespQs_0$D_IN = graphEdgeResps_0_put ;
  assign graphEdgeRespQs_0$ENQ = EN_graphEdgeResps_0_put ;
  assign graphEdgeRespQs_0$DEQ =
	     graphEdgeRespQs_0$EMPTY_N &&
	     graphNodeQ2_deqQ_i_notEmpty__66_AND_newDistQ_e_ETC___d472 ;
  assign graphEdgeRespQs_0$CLR = 1'b0 ;

  // submodule graphNodeQ0_deqQ
  assign graphNodeQ0_deqQ$D_IN = graphNodeQ0_fifo_wDataOut$wget ;
  assign graphNodeQ0_deqQ$ENQ = graphNodeQ0_fifo_pwDequeue$whas ;
  assign graphNodeQ0_deqQ$DEQ = WILL_FIRE_RL_recvSrcNode ;
  assign graphNodeQ0_deqQ$CLR = 1'b0 ;

  // submodule graphNodeQ0_enqQ
  assign graphNodeQ0_enqQ$D_IN = workInQ$D_OUT[63] ;
  assign graphNodeQ0_enqQ$ENQ = MUX_numWorkFetched$write_1__SEL_2 ;
  assign graphNodeQ0_enqQ$DEQ = graphNodeQ0_fifo_pwEnqueue$whas ;
  assign graphNodeQ0_enqQ$CLR = 1'b0 ;

  // submodule graphNodeQ0_fifo_memory
  assign graphNodeQ0_fifo_memory$ADDRA = graphNodeQ0_fifo_rWrPtr[9:0] ;
  assign graphNodeQ0_fifo_memory$ADDRB =
	     graphNodeQ0_fifo_pwDequeue$whas ?
	       x__h2919[9:0] :
	       graphNodeQ0_fifo_rRdPtr[9:0] ;
  assign graphNodeQ0_fifo_memory$DIA = x__h2809 ;
  assign graphNodeQ0_fifo_memory$DIB = 1'b0 /* unspecified value */  ;
  assign graphNodeQ0_fifo_memory$WEA = graphNodeQ0_fifo_pwEnqueue$whas ;
  assign graphNodeQ0_fifo_memory$WEB = 1'd0 ;
  assign graphNodeQ0_fifo_memory$ENA = 1'b1 ;
  assign graphNodeQ0_fifo_memory$ENB = 1'b1 ;

  // submodule graphNodeQ1_deqQ
  assign graphNodeQ1_deqQ$D_IN = graphNodeQ1_fifo_wDataOut$wget ;
  assign graphNodeQ1_deqQ$ENQ = graphNodeQ1_fifo_pwDequeue$whas ;
  assign graphNodeQ1_deqQ$DEQ = MUX_numWorkRetired$write_1__SEL_2 ;
  assign graphNodeQ1_deqQ$CLR = 1'b0 ;

  // submodule graphNodeQ1_enqQ
  assign graphNodeQ1_enqQ$D_IN =
	     { graphNodeRespQs_0$D_OUT, graphNodeQ0_deqQ$D_OUT } ;
  assign graphNodeQ1_enqQ$ENQ =
	     WILL_FIRE_RL_recvSrcNode &&
	     graphNodeRespQs_0$D_OUT[95:64] != 32'd0 ;
  assign graphNodeQ1_enqQ$DEQ = graphNodeQ1_fifo_pwEnqueue$whas ;
  assign graphNodeQ1_enqQ$CLR = 1'b0 ;

  // submodule graphNodeQ1_fifo_memory
  assign graphNodeQ1_fifo_memory$ADDRA = graphNodeQ1_fifo_rWrPtr[8:0] ;
  assign graphNodeQ1_fifo_memory$ADDRB =
	     graphNodeQ1_fifo_pwDequeue$whas ?
	       x__h4320[8:0] :
	       graphNodeQ1_fifo_rRdPtr[8:0] ;
  assign graphNodeQ1_fifo_memory$DIA =
	     { IF_graphNodeQ1_fifo_wDataIn_whas__2_THEN_graph_ETC___d55,
	       x__read_procId__h4079 } ;
  assign graphNodeQ1_fifo_memory$DIB =
	     129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign graphNodeQ1_fifo_memory$WEA = graphNodeQ1_fifo_pwEnqueue$whas ;
  assign graphNodeQ1_fifo_memory$WEB = 1'd0 ;
  assign graphNodeQ1_fifo_memory$ENA = 1'b1 ;
  assign graphNodeQ1_fifo_memory$ENB = 1'b1 ;

  // submodule graphNodeQ2_deqQ
  assign graphNodeQ2_deqQ$D_IN = graphNodeQ2_fifo_wDataOut$wget ;
  assign graphNodeQ2_deqQ$ENQ = graphNodeQ2_fifo_pwDequeue$whas ;
  assign graphNodeQ2_deqQ$DEQ =
	     graphEdgeRespQs_0$EMPTY_N &&
	     graphNodeQ2_deqQ_i_notEmpty__66_AND_newDistQ_e_ETC___d472 ;
  assign graphNodeQ2_deqQ$CLR = 1'b0 ;

  // submodule graphNodeQ2_enqQ
  assign graphNodeQ2_enqQ$D_IN = graphNodeQ1_deqQ$D_OUT ;
  assign graphNodeQ2_enqQ$ENQ = MUX_numEdgesFetched$write_1__SEL_2 ;
  assign graphNodeQ2_enqQ$DEQ = graphNodeQ2_fifo_pwEnqueue$whas ;
  assign graphNodeQ2_enqQ$CLR = 1'b0 ;

  // submodule graphNodeQ2_fifo_memory
  assign graphNodeQ2_fifo_memory$ADDRA = graphNodeQ2_fifo_rWrPtr[8:0] ;
  assign graphNodeQ2_fifo_memory$ADDRB =
	     graphNodeQ2_fifo_pwDequeue$whas ?
	       x__h5860[8:0] :
	       graphNodeQ2_fifo_rRdPtr[8:0] ;
  assign graphNodeQ2_fifo_memory$DIA =
	     { IF_graphNodeQ2_fifo_wDataIn_whas__00_THEN_grap_ETC___d103,
	       x__read_procId__h5619 } ;
  assign graphNodeQ2_fifo_memory$DIB =
	     129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */  ;
  assign graphNodeQ2_fifo_memory$WEA = graphNodeQ2_fifo_pwEnqueue$whas ;
  assign graphNodeQ2_fifo_memory$WEB = 1'd0 ;
  assign graphNodeQ2_fifo_memory$ENA = 1'b1 ;
  assign graphNodeQ2_fifo_memory$ENB = 1'b1 ;

  // submodule graphNodeReqQs_0
  assign graphNodeReqQs_0$D_IN = { workInQ$D_OUT[31:0], workInQ$D_OUT[63] } ;
  assign graphNodeReqQs_0$ENQ = MUX_numWorkFetched$write_1__SEL_2 ;
  assign graphNodeReqQs_0$DEQ = EN_graphNodeReqs_0_get ;
  assign graphNodeReqQs_0$CLR = 1'b0 ;

  // submodule graphNodeRespQs_0
  assign graphNodeRespQs_0$D_IN = graphNodeResps_0_put ;
  assign graphNodeRespQs_0$ENQ = EN_graphNodeResps_0_put ;
  assign graphNodeRespQs_0$DEQ = WILL_FIRE_RL_recvSrcNode ;
  assign graphNodeRespQs_0$CLR = 1'b0 ;

  // submodule graphPartialNodeReqQs_0
  assign graphPartialNodeReqQs_0$D_IN =
	     { graphEdgeRespQs_0$D_OUT[63:32],
	       graphNodeQ2_deqQ$D_OUT[0],
	       64'hAAAAAAAAAAAAAAAA } ;
  assign graphPartialNodeReqQs_0$ENQ =
	     graphEdgeRespQs_0$EMPTY_N &&
	     graphNodeQ2_deqQ_i_notEmpty__66_AND_newDistQ_e_ETC___d472 ;
  assign graphPartialNodeReqQs_0$DEQ = EN_graphPartialNodeReqs_0_get ;
  assign graphPartialNodeReqQs_0$CLR = 1'b0 ;

  // submodule graphPartialNodeRespQs_0
  assign graphPartialNodeRespQs_0$D_IN = graphPartialNodeResps_0_put ;
  assign graphPartialNodeRespQs_0$ENQ = EN_graphPartialNodeResps_0_put ;
  assign graphPartialNodeRespQs_0$DEQ = WILL_FIRE_RL_recvDestNode ;
  assign graphPartialNodeRespQs_0$CLR = 1'b0 ;

  // submodule newDistProcQ_deqQ
  assign newDistProcQ_deqQ$D_IN = newDistProcQ_fifo_wDataOut$wget ;
  assign newDistProcQ_deqQ$ENQ = newDistProcQ_fifo_pwDequeue$whas ;
  assign newDistProcQ_deqQ$DEQ = WILL_FIRE_RL_recvDestNode ;
  assign newDistProcQ_deqQ$CLR = 1'b0 ;

  // submodule newDistProcQ_enqQ
  assign newDistProcQ_enqQ$D_IN =
	     { graphEdgeRespQs_0$D_OUT[63:32], graphNodeQ2_deqQ$D_OUT[0] } ;
  assign newDistProcQ_enqQ$ENQ =
	     graphEdgeRespQs_0$EMPTY_N &&
	     graphNodeQ2_deqQ_i_notEmpty__66_AND_newDistQ_e_ETC___d472 ;
  assign newDistProcQ_enqQ$DEQ = newDistProcQ_fifo_pwEnqueue$whas ;
  assign newDistProcQ_enqQ$CLR = 1'b0 ;

  // submodule newDistProcQ_fifo_memory
  assign newDistProcQ_fifo_memory$ADDRA = newDistProcQ_fifo_rWrPtr[9:0] ;
  assign newDistProcQ_fifo_memory$ADDRB =
	     newDistProcQ_fifo_pwDequeue$whas ?
	       x__h8631[9:0] :
	       newDistProcQ_fifo_rRdPtr[9:0] ;
  assign newDistProcQ_fifo_memory$DIA =
	     { x__read_id__h8462, x__read_procId__h8463 } ;
  assign newDistProcQ_fifo_memory$DIB =
	     33'h0AAAAAAAA /* unspecified value */  ;
  assign newDistProcQ_fifo_memory$WEA = newDistProcQ_fifo_pwEnqueue$whas ;
  assign newDistProcQ_fifo_memory$WEB = 1'd0 ;
  assign newDistProcQ_fifo_memory$ENA = 1'b1 ;
  assign newDistProcQ_fifo_memory$ENB = 1'b1 ;

  // submodule newDistQ_deqQ
  assign newDistQ_deqQ$D_IN = newDistQ_fifo_wDataOut$wget ;
  assign newDistQ_deqQ$ENQ = newDistQ_fifo_pwDequeue$whas ;
  assign newDistQ_deqQ$DEQ = WILL_FIRE_RL_recvDestNode ;
  assign newDistQ_deqQ$CLR = 1'b0 ;

  // submodule newDistQ_enqQ
  assign newDistQ_enqQ$D_IN =
	     graphNodeQ2_deqQ$D_OUT[128:97] + graphEdgeRespQs_0$D_OUT[31:0] ;
  assign newDistQ_enqQ$ENQ =
	     graphEdgeRespQs_0$EMPTY_N &&
	     graphNodeQ2_deqQ_i_notEmpty__66_AND_newDistQ_e_ETC___d472 ;
  assign newDistQ_enqQ$DEQ = newDistQ_fifo_pwEnqueue$whas ;
  assign newDistQ_enqQ$CLR = 1'b0 ;

  // submodule newDistQ_fifo_memory
  assign newDistQ_fifo_memory$ADDRA = newDistQ_fifo_rWrPtr[9:0] ;
  assign newDistQ_fifo_memory$ADDRB =
	     newDistQ_fifo_pwDequeue$whas ?
	       x__h7304[9:0] :
	       newDistQ_fifo_rRdPtr[9:0] ;
  assign newDistQ_fifo_memory$DIA = x3__h7119 ;
  assign newDistQ_fifo_memory$DIB = 32'hAAAAAAAA /* unspecified value */  ;
  assign newDistQ_fifo_memory$WEA = newDistQ_fifo_pwEnqueue$whas ;
  assign newDistQ_fifo_memory$WEB = 1'd0 ;
  assign newDistQ_fifo_memory$ENA = 1'b1 ;
  assign newDistQ_fifo_memory$ENB = 1'b1 ;

  // submodule workInQ
  assign workInQ$D_IN = workIn_put ;
  assign workInQ$ENQ = EN_workIn_put ;
  assign workInQ$DEQ = MUX_numWorkFetched$write_1__SEL_2 ;
  assign workInQ$CLR = 1'b0 ;

  // submodule workOutQ
  assign workOutQ$D_IN = { x__h17691, casContextQ2_deqQ$D_OUT[64:33] } ;
  assign workOutQ$ENQ =
	     WILL_FIRE_RL_casDone && graphCASRespQs_0$D_OUT[32] &&
	     casContextQ2_deqQ$D_OUT[32:1] != 32'd0 ;
  assign workOutQ$DEQ = EN_workOut_get ;
  assign workOutQ$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_distance_27660_ULE_7_THEN_distance_27660_EL_ETC__q1 =
	     (distance_2__h17660 <= 32'd7) ? distance_2__h17660 : 32'd7 ;
  assign IF_graphCASRespQs_0_first__37_BIT_32_38_THEN_c_ETC___d552 =
	     graphCASRespQs_0$D_OUT[32] ?
	       casContextQ2_deqQ$D_OUT[32:1] == 32'd0 || workOutQ$FULL_N :
	       !casContextQ2_deqQ_first__39_BITS_96_TO_65_44_U_ETC___d546 ||
	       casContextRetryQ_enqQ$FULL_N &&
	       casContextRetryStallQ_enqQ$FULL_N ;
  assign IF_graphNodeQ1_fifo_wDataIn_whas__2_THEN_graph_ETC___d55 =
	     graphNodeQ1_fifo_pwEnqueue$whas ?
	       graphNodeQ1_enqQ$D_OUT[128:1] :
	       128'd0 ;
  assign IF_graphNodeQ2_fifo_wDataIn_whas__00_THEN_grap_ETC___d103 =
	     graphNodeQ2_fifo_pwEnqueue$whas ?
	       graphNodeQ2_enqQ$D_OUT[128:1] :
	       128'd0 ;
  assign NOT_workInQ_notEmpty__87_88_AND_NOT_workOutQ_n_ETC___d397 =
	     !workInQ$EMPTY_N && !workOutQ$EMPTY_N &&
	     numWorkFetched == numWorkRetired + numWorkDiscarded ;
  assign casContextQ1_first__18_BITS_96_TO_65_19_ULT_ca_ETC___d521 =
	     casContextQ1$D_OUT[96:65] < casContextQ1$D_OUT[128:97] ;
  assign casContextQ2_deqQ_first__39_BITS_96_TO_65_44_U_ETC___d546 =
	     casContextQ2_deqQ$D_OUT[96:65] < graphCASRespQs_0$D_OUT[31:0] ;
  assign distance_2__h17660 = distance__h17659 >> rg_bSize ;
  assign distance__h17659 =
	     (casContextQ2_deqQ$D_OUT[96:65] <= rg_totalBias) ?
	       32'd0 :
	       casContextQ2_deqQ$D_OUT[96:65] - rg_totalBias ;
  assign edgeIdx_49_EQ_graphNodeQ1_deqQ_first__47_BITS__ETC___d454 =
	     edgeIdx == y__h15858 ;
  assign graphNodeQ2_deqQ_i_notEmpty__66_AND_newDistQ_e_ETC___d472 =
	     graphNodeQ2_deqQ$EMPTY_N && newDistQ_enqQ$FULL_N &&
	     newDistProcQ_enqQ$FULL_N &&
	     graphPartialNodeReqQs_0$FULL_N ;
  assign x3__h13037 =
	     casContextRetryStallQ_fifo_pwEnqueue$whas ?
	       casContextRetryStallQ_enqQ$D_OUT :
	       8'd0 ;
  assign x3__h7119 =
	     newDistQ_fifo_pwEnqueue$whas ? newDistQ_enqQ$D_OUT : 32'd0 ;
  assign x__h10031 =
	     casContextQ2_fifo_pwEnqueue$whas ?
	       casContextQ2_enqQ$D_OUT[128:97] :
	       32'd0 ;
  assign x__h10048 = casContextQ2_fifo_rWrPtr + 11'd1 ;
  assign x__h10194 = casContextQ2_fifo_rRdPtr + 11'd1 ;
  assign x__h11508 =
	     casContextRetryQ_fifo_pwEnqueue$whas ?
	       casContextRetryQ_enqQ$D_OUT[96:65] :
	       32'd0 ;
  assign x__h11526 =
	     casContextRetryQ_fifo_pwEnqueue$whas ?
	       casContextRetryQ_enqQ$D_OUT[64:33] :
	       32'd0 ;
  assign x__h11548 =
	     casContextRetryQ_fifo_pwEnqueue$whas ?
	       casContextRetryQ_enqQ$D_OUT[32:1] :
	       32'd0 ;
  assign x__h11603 =
	     casContextRetryQ_fifo_pwEnqueue$whas ?
	       casContextRetryQ_enqQ$D_OUT[128:97] :
	       32'd0 ;
  assign x__h11620 = casContextRetryQ_fifo_rWrPtr + 10'd1 ;
  assign x__h11766 = casContextRetryQ_fifo_rRdPtr + 10'd1 ;
  assign x__h13120 = casContextRetryStallQ_fifo_rWrPtr + 10'd1 ;
  assign x__h13222 = casContextRetryStallQ_fifo_rRdPtr + 10'd1 ;
  assign x__h15887 = edgeIdx + 32'd1 ;
  assign x__h17524 = rg_offset << x__h17528 ;
  assign x__h17528 = rg_bSize + 5'd3 ;
  assign x__h17691 =
	     { casContextQ2_deqQ$D_OUT[0],
	       IF_distance_27660_ULE_7_THEN_distance_27660_EL_ETC__q1[30:0] } ;
  assign x__h2809 =
	     graphNodeQ0_fifo_pwEnqueue$whas && graphNodeQ0_enqQ$D_OUT ;
  assign x__h2817 = graphNodeQ0_fifo_rWrPtr + 11'd1 ;
  assign x__h2919 = graphNodeQ0_fifo_rRdPtr + 11'd1 ;
  assign x__h4188 = graphNodeQ1_fifo_rWrPtr + 10'd1 ;
  assign x__h4320 = graphNodeQ1_fifo_rRdPtr + 10'd1 ;
  assign x__h5728 = graphNodeQ2_fifo_rWrPtr + 10'd1 ;
  assign x__h5860 = graphNodeQ2_fifo_rRdPtr + 10'd1 ;
  assign x__h7202 = newDistQ_fifo_rWrPtr + 11'd1 ;
  assign x__h7304 = newDistQ_fifo_rRdPtr + 11'd1 ;
  assign x__h8523 = newDistProcQ_fifo_rWrPtr + 11'd1 ;
  assign x__h8631 = newDistProcQ_fifo_rRdPtr + 11'd1 ;
  assign x__h9931 =
	     casContextQ2_fifo_pwEnqueue$whas ?
	       casContextQ2_enqQ$D_OUT[96:65] :
	       32'd0 ;
  assign x__h9954 =
	     casContextQ2_fifo_pwEnqueue$whas ?
	       casContextQ2_enqQ$D_OUT[64:33] :
	       32'd0 ;
  assign x__h9976 =
	     casContextQ2_fifo_pwEnqueue$whas ?
	       casContextQ2_enqQ$D_OUT[32:1] :
	       32'd0 ;
  assign x__read_id__h8462 =
	     newDistProcQ_fifo_pwEnqueue$whas ?
	       newDistProcQ_enqQ$D_OUT[32:1] :
	       32'd0 ;
  assign x__read_procId__h4079 =
	     graphNodeQ1_fifo_pwEnqueue$whas && graphNodeQ1_enqQ$D_OUT[0] ;
  assign x__read_procId__h5619 =
	     graphNodeQ2_fifo_pwEnqueue$whas && graphNodeQ2_enqQ$D_OUT[0] ;
  assign x__read_procId__h8463 =
	     newDistProcQ_fifo_pwEnqueue$whas && newDistProcQ_enqQ$D_OUT[0] ;
  assign x__read_snd_snd_procId__h11541 =
	     casContextRetryQ_fifo_pwEnqueue$whas &&
	     casContextRetryQ_enqQ$D_OUT[0] ;
  assign x__read_snd_snd_procId__h9969 =
	     casContextQ2_fifo_pwEnqueue$whas && casContextQ2_enqQ$D_OUT[0] ;
  assign y__h15858 = graphNodeQ1_deqQ$D_OUT[96:65] - 32'd1 ;

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        casContextQ2_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    141'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	casContextQ2_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 11'd0;
	casContextQ2_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 11'd0;
	casContextRetryQ_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    140'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	casContextRetryQ_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 10'd0;
	casContextRetryQ_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 10'd0;
	casContextRetryStallQ_fifo_rCache <= `BSV_ASSIGNMENT_DELAY 19'd174762;
	casContextRetryStallQ_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 10'd0;
	casContextRetryStallQ_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 10'd0;
	casRetryStall <= `BSV_ASSIGNMENT_DELAY 8'd0;
	casRetryWait <= `BSV_ASSIGNMENT_DELAY 1'd1;
	done <= `BSV_ASSIGNMENT_DELAY 1'd1;
	edgeIdx <= `BSV_ASSIGNMENT_DELAY 32'd0;
	graphNodeQ0_fifo_rCache <= `BSV_ASSIGNMENT_DELAY 13'd2730;
	graphNodeQ0_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 11'd0;
	graphNodeQ0_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 11'd0;
	graphNodeQ1_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    140'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	graphNodeQ1_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 10'd0;
	graphNodeQ1_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 10'd0;
	graphNodeQ2_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	    140'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
	graphNodeQ2_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 10'd0;
	graphNodeQ2_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 10'd0;
	lfsr_r <= `BSV_ASSIGNMENT_DELAY 8'd1;
	newDistProcQ_fifo_rCache <= `BSV_ASSIGNMENT_DELAY 45'h0AAAAAAAAAAA;
	newDistProcQ_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 11'd0;
	newDistProcQ_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 11'd0;
	newDistQ_fifo_rCache <= `BSV_ASSIGNMENT_DELAY 44'h2AAAAAAAAAA;
	newDistQ_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY 11'd0;
	newDistQ_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY 11'd0;
	started <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (casContextQ2_fifo_rCache$EN)
	  casContextQ2_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      casContextQ2_fifo_rCache$D_IN;
	if (casContextQ2_fifo_rRdPtr$EN)
	  casContextQ2_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      casContextQ2_fifo_rRdPtr$D_IN;
	if (casContextQ2_fifo_rWrPtr$EN)
	  casContextQ2_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      casContextQ2_fifo_rWrPtr$D_IN;
	if (casContextRetryQ_fifo_rCache$EN)
	  casContextRetryQ_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      casContextRetryQ_fifo_rCache$D_IN;
	if (casContextRetryQ_fifo_rRdPtr$EN)
	  casContextRetryQ_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      casContextRetryQ_fifo_rRdPtr$D_IN;
	if (casContextRetryQ_fifo_rWrPtr$EN)
	  casContextRetryQ_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      casContextRetryQ_fifo_rWrPtr$D_IN;
	if (casContextRetryStallQ_fifo_rCache$EN)
	  casContextRetryStallQ_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      casContextRetryStallQ_fifo_rCache$D_IN;
	if (casContextRetryStallQ_fifo_rRdPtr$EN)
	  casContextRetryStallQ_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      casContextRetryStallQ_fifo_rRdPtr$D_IN;
	if (casContextRetryStallQ_fifo_rWrPtr$EN)
	  casContextRetryStallQ_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      casContextRetryStallQ_fifo_rWrPtr$D_IN;
	if (casRetryStall$EN)
	  casRetryStall <= `BSV_ASSIGNMENT_DELAY casRetryStall$D_IN;
	if (casRetryWait$EN)
	  casRetryWait <= `BSV_ASSIGNMENT_DELAY casRetryWait$D_IN;
	if (done$EN) done <= `BSV_ASSIGNMENT_DELAY done$D_IN;
	if (edgeIdx$EN) edgeIdx <= `BSV_ASSIGNMENT_DELAY edgeIdx$D_IN;
	if (graphNodeQ0_fifo_rCache$EN)
	  graphNodeQ0_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      graphNodeQ0_fifo_rCache$D_IN;
	if (graphNodeQ0_fifo_rRdPtr$EN)
	  graphNodeQ0_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      graphNodeQ0_fifo_rRdPtr$D_IN;
	if (graphNodeQ0_fifo_rWrPtr$EN)
	  graphNodeQ0_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      graphNodeQ0_fifo_rWrPtr$D_IN;
	if (graphNodeQ1_fifo_rCache$EN)
	  graphNodeQ1_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      graphNodeQ1_fifo_rCache$D_IN;
	if (graphNodeQ1_fifo_rRdPtr$EN)
	  graphNodeQ1_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      graphNodeQ1_fifo_rRdPtr$D_IN;
	if (graphNodeQ1_fifo_rWrPtr$EN)
	  graphNodeQ1_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      graphNodeQ1_fifo_rWrPtr$D_IN;
	if (graphNodeQ2_fifo_rCache$EN)
	  graphNodeQ2_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      graphNodeQ2_fifo_rCache$D_IN;
	if (graphNodeQ2_fifo_rRdPtr$EN)
	  graphNodeQ2_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      graphNodeQ2_fifo_rRdPtr$D_IN;
	if (graphNodeQ2_fifo_rWrPtr$EN)
	  graphNodeQ2_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      graphNodeQ2_fifo_rWrPtr$D_IN;
	if (lfsr_r$EN) lfsr_r <= `BSV_ASSIGNMENT_DELAY lfsr_r$D_IN;
	if (newDistProcQ_fifo_rCache$EN)
	  newDistProcQ_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      newDistProcQ_fifo_rCache$D_IN;
	if (newDistProcQ_fifo_rRdPtr$EN)
	  newDistProcQ_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      newDistProcQ_fifo_rRdPtr$D_IN;
	if (newDistProcQ_fifo_rWrPtr$EN)
	  newDistProcQ_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      newDistProcQ_fifo_rWrPtr$D_IN;
	if (newDistQ_fifo_rCache$EN)
	  newDistQ_fifo_rCache <= `BSV_ASSIGNMENT_DELAY
	      newDistQ_fifo_rCache$D_IN;
	if (newDistQ_fifo_rRdPtr$EN)
	  newDistQ_fifo_rRdPtr <= `BSV_ASSIGNMENT_DELAY
	      newDistQ_fifo_rRdPtr$D_IN;
	if (newDistQ_fifo_rWrPtr$EN)
	  newDistQ_fifo_rWrPtr <= `BSV_ASSIGNMENT_DELAY
	      newDistQ_fifo_rWrPtr$D_IN;
	if (started$EN) started <= `BSV_ASSIGNMENT_DELAY started$D_IN;
      end
    if (casRetryPkt$EN) casRetryPkt <= `BSV_ASSIGNMENT_DELAY casRetryPkt$D_IN;
    if (fpgaId$EN) fpgaId <= `BSV_ASSIGNMENT_DELAY fpgaId$D_IN;
    if (laneId$EN) laneId <= `BSV_ASSIGNMENT_DELAY laneId$D_IN;
    if (numCASIssued$EN)
      numCASIssued <= `BSV_ASSIGNMENT_DELAY numCASIssued$D_IN;
    if (numCASRetried$EN)
      numCASRetried <= `BSV_ASSIGNMENT_DELAY numCASRetried$D_IN;
    if (numCasCxt1Full$EN)
      numCasCxt1Full <= `BSV_ASSIGNMENT_DELAY numCasCxt1Full$D_IN;
    if (numCasCxt2Full$EN)
      numCasCxt2Full <= `BSV_ASSIGNMENT_DELAY numCasCxt2Full$D_IN;
    if (numCasCxtRetryFull$EN)
      numCasCxtRetryFull <= `BSV_ASSIGNMENT_DELAY numCasCxtRetryFull$D_IN;
    if (numCasCxtRetryStallFull$EN)
      numCasCxtRetryStallFull <= `BSV_ASSIGNMENT_DELAY
	  numCasCxtRetryStallFull$D_IN;
    if (numEdgePipeStall$EN)
      numEdgePipeStall <= `BSV_ASSIGNMENT_DELAY numEdgePipeStall$D_IN;
    if (numEdgesDiscarded$EN)
      numEdgesDiscarded <= `BSV_ASSIGNMENT_DELAY numEdgesDiscarded$D_IN;
    if (numEdgesFetched$EN)
      numEdgesFetched <= `BSV_ASSIGNMENT_DELAY numEdgesFetched$D_IN;
    if (numEdgesRetired$EN)
      numEdgesRetired <= `BSV_ASSIGNMENT_DELAY numEdgesRetired$D_IN;
    if (numGraphCASReqFull$EN)
      numGraphCASReqFull <= `BSV_ASSIGNMENT_DELAY numGraphCASReqFull$D_IN;
    if (numGraphEdgeReqFull$EN)
      numGraphEdgeReqFull <= `BSV_ASSIGNMENT_DELAY numGraphEdgeReqFull$D_IN;
    if (numGraphNode1Full$EN)
      numGraphNode1Full <= `BSV_ASSIGNMENT_DELAY numGraphNode1Full$D_IN;
    if (numGraphNode2Full$EN)
      numGraphNode2Full <= `BSV_ASSIGNMENT_DELAY numGraphNode2Full$D_IN;
    if (numGraphNodeReqFull$EN)
      numGraphNodeReqFull <= `BSV_ASSIGNMENT_DELAY numGraphNodeReqFull$D_IN;
    if (numNewDistFull$EN)
      numNewDistFull <= `BSV_ASSIGNMENT_DELAY numNewDistFull$D_IN;
    if (numWorkDiscarded$EN)
      numWorkDiscarded <= `BSV_ASSIGNMENT_DELAY numWorkDiscarded$D_IN;
    if (numWorkFetched$EN)
      numWorkFetched <= `BSV_ASSIGNMENT_DELAY numWorkFetched$D_IN;
    if (numWorkInEmpty$EN)
      numWorkInEmpty <= `BSV_ASSIGNMENT_DELAY numWorkInEmpty$D_IN;
    if (numWorkOutFull$EN)
      numWorkOutFull <= `BSV_ASSIGNMENT_DELAY numWorkOutFull$D_IN;
    if (numWorkRetired$EN)
      numWorkRetired <= `BSV_ASSIGNMENT_DELAY numWorkRetired$D_IN;
    if (numWorklistStall$EN)
      numWorklistStall <= `BSV_ASSIGNMENT_DELAY numWorklistStall$D_IN;
    if (rg_bSize$EN) rg_bSize <= `BSV_ASSIGNMENT_DELAY rg_bSize$D_IN;
    if (rg_bias$EN) rg_bias <= `BSV_ASSIGNMENT_DELAY rg_bias$D_IN;
    if (rg_offset$EN) rg_offset <= `BSV_ASSIGNMENT_DELAY rg_offset$D_IN;
    if (rg_totalBias$EN)
      rg_totalBias <= `BSV_ASSIGNMENT_DELAY rg_totalBias$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    casContextQ2_fifo_rCache = 141'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    casContextQ2_fifo_rRdPtr = 11'h2AA;
    casContextQ2_fifo_rWrPtr = 11'h2AA;
    casContextRetryQ_fifo_rCache = 140'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    casContextRetryQ_fifo_rRdPtr = 10'h2AA;
    casContextRetryQ_fifo_rWrPtr = 10'h2AA;
    casContextRetryStallQ_fifo_rCache = 19'h2AAAA;
    casContextRetryStallQ_fifo_rRdPtr = 10'h2AA;
    casContextRetryStallQ_fifo_rWrPtr = 10'h2AA;
    casRetryPkt = 129'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    casRetryStall = 8'hAA;
    casRetryWait = 1'h0;
    done = 1'h0;
    edgeIdx = 32'hAAAAAAAA;
    fpgaId = 2'h2;
    graphNodeQ0_fifo_rCache = 13'h0AAA;
    graphNodeQ0_fifo_rRdPtr = 11'h2AA;
    graphNodeQ0_fifo_rWrPtr = 11'h2AA;
    graphNodeQ1_fifo_rCache = 140'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    graphNodeQ1_fifo_rRdPtr = 10'h2AA;
    graphNodeQ1_fifo_rWrPtr = 10'h2AA;
    graphNodeQ2_fifo_rCache = 140'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    graphNodeQ2_fifo_rRdPtr = 10'h2AA;
    graphNodeQ2_fifo_rWrPtr = 10'h2AA;
    laneId = 4'hA;
    lfsr_r = 8'hAA;
    newDistProcQ_fifo_rCache = 45'h0AAAAAAAAAAA;
    newDistProcQ_fifo_rRdPtr = 11'h2AA;
    newDistProcQ_fifo_rWrPtr = 11'h2AA;
    newDistQ_fifo_rCache = 44'hAAAAAAAAAAA;
    newDistQ_fifo_rRdPtr = 11'h2AA;
    newDistQ_fifo_rWrPtr = 11'h2AA;
    numCASIssued = 48'hAAAAAAAAAAAA;
    numCASRetried = 64'hAAAAAAAAAAAAAAAA;
    numCasCxt1Full = 48'hAAAAAAAAAAAA;
    numCasCxt2Full = 48'hAAAAAAAAAAAA;
    numCasCxtRetryFull = 48'hAAAAAAAAAAAA;
    numCasCxtRetryStallFull = 48'hAAAAAAAAAAAA;
    numEdgePipeStall = 64'hAAAAAAAAAAAAAAAA;
    numEdgesDiscarded = 48'hAAAAAAAAAAAA;
    numEdgesFetched = 48'hAAAAAAAAAAAA;
    numEdgesRetired = 48'hAAAAAAAAAAAA;
    numGraphCASReqFull = 48'hAAAAAAAAAAAA;
    numGraphEdgeReqFull = 48'hAAAAAAAAAAAA;
    numGraphNode1Full = 48'hAAAAAAAAAAAA;
    numGraphNode2Full = 48'hAAAAAAAAAAAA;
    numGraphNodeReqFull = 48'hAAAAAAAAAAAA;
    numNewDistFull = 48'hAAAAAAAAAAAA;
    numWorkDiscarded = 48'hAAAAAAAAAAAA;
    numWorkFetched = 48'hAAAAAAAAAAAA;
    numWorkInEmpty = 48'hAAAAAAAAAAAA;
    numWorkOutFull = 48'hAAAAAAAAAAAA;
    numWorkRetired = 48'hAAAAAAAAAAAA;
    numWorklistStall = 64'hAAAAAAAAAAAAAAAA;
    rg_bSize = 5'h0A;
    rg_bias = 32'hAAAAAAAA;
    rg_offset = 64'hAAAAAAAAAAAAAAAA;
    rg_totalBias = 32'hAAAAAAAA;
    started = 1'h0;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_getEdges && !graphNodeQ1_deqQ$EMPTY_N)
	begin
	  Task_$stime__avValue1 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_casRetry)
	begin
	  Task_$stime__avValue2 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_recvDestNode)
	begin
	  Task_$stime__avValue3 = $stime;
	  #0;
	end
    if (RST_N != `BSV_RESET_VALUE)
      if (EN_init) $display("bSize is %0d", init_bSize);
  end
  // synopsys translate_on
endmodule  // mkSSSPEngine

