./GaloisTypes.bsv:} GraphNode deriving (Bits, Eq);
./GaloisTypes.bsv:} GraphNodeReq deriving(Bits, Eq);
./GaloisTypes.bsv:   GraphNode node;
./GaloisTypes.bsv:} GraphNodeResp deriving(Bits, Eq);
./GaloisTypes.bsv:      GraphNode node;
./GraphEngine1.bsv:import GraphNodePipe::*;
./GraphEngine1.bsv:    interface Vector#(2, Put#(GraphNodeReq)) nodeReq;
./GraphEngine1.bsv:    interface Vector#(2, Get#(GraphNodeResp)) nodeResp;
./GraphEngine1.bsv:    Vector#(`NUM_ENGINES, Vector#(2, GraphNodeIfc)) nodePipes = ?;
./GraphEngine1.bsv:            nodePipes[i][0] <- mkGraphNodePipe(0, 1);
./GraphEngine1.bsv:            nodePipes[i][0] <- mkGraphNodePipe(6, 7);
./GraphEngine1.bsv:        nodePipes[i][1] <- mkGraphNodePipe(2, 3);
./GraphEngine1.bsv:    Vector#(`NUM_ENGINES, Vector#(2, Put#(GraphNodeReq))) nodeReq_tmp = ?;
./GraphEngine1.bsv:    Vector#(`NUM_ENGINES, Vector#(2, Get#(GraphNodeResp))) nodeResp_tmp = ?;
./GraphEngine2.bsv:import GraphNodePipe::*;
./GraphEngine2.bsv:    interface Vector#(2, Put#(GraphNodeReq)) nodeReq;
./GraphEngine2.bsv:    interface Vector#(2, Get#(GraphNodeResp)) nodeResp;
./GraphEngine2.bsv:    Vector#(`NUM_ENGINES, Vector#(2, GraphNodeIfc)) nodePipes = ?;
./GraphEngine2.bsv:        nodePipes[i][0] <- mkGraphNodePipe(0, 1);
./GraphEngine2.bsv:        //    nodePipes[i][0] <- mkGraphNodePipe(0, 1);
./GraphEngine2.bsv:        //    nodePipes[i][0] <- mkGraphNodePipe(6, 7);
./GraphEngine2.bsv:        nodePipes[i][1] <- mkGraphNodePipe(2, 3);
./GraphEngine2.bsv:    Vector#(`NUM_ENGINES, Vector#(2, Put#(GraphNodeReq))) nodeReq_tmp = ?;
./GraphEngine2.bsv:    Vector#(`NUM_ENGINES, Vector#(2, Get#(GraphNodeResp))) nodeResp_tmp = ?;
./GraphEngine3.bsv:import GraphNodePipe::*;
./GraphEngine3.bsv:    interface Vector#(2, Put#(GraphNodeReq)) nodeReq;
./GraphEngine3.bsv:    interface Vector#(2, Get#(GraphNodeResp)) nodeResp;
./GraphEngine3.bsv:    Vector#(`NUM_ENGINES, Vector#(2, GraphNodeIfc)) nodePipes = ?;
./GraphEngine3.bsv:        nodePipes[i][0] <- mkGraphNodePipe(0, 1);
./GraphEngine3.bsv:        //    nodePipes[i][0] <- mkGraphNodePipe(0, 1);
./GraphEngine3.bsv:        //    nodePipes[i][0] <- mkGraphNodePipe(6, 7);
./GraphEngine3.bsv:        nodePipes[i][1] <- mkGraphNodePipe(2, 3);
./GraphEngine3.bsv:    Vector#(`NUM_ENGINES, Vector#(2, Put#(GraphNodeReq))) nodeReq_tmp = ?;
./GraphEngine3.bsv:    Vector#(`NUM_ENGINES, Vector#(2, Get#(GraphNodeResp))) nodeResp_tmp = ?;
./GraphEngine4.bsv:import GraphNodePipe::*;
./GraphEngine4.bsv:    interface Vector#(2, Put#(GraphNodeReq)) nodeReq;
./GraphEngine4.bsv:    interface Vector#(2, Get#(GraphNodeResp)) nodeResp;
./GraphEngine4.bsv:    Vector#(`NUM_ENGINES, Vector#(2, GraphNodeIfc)) nodePipes = ?;
./GraphEngine4.bsv:        nodePipes[i][0] <- mkGraphNodePipe(0, 1);
./GraphEngine4.bsv:        nodePipes[i][1] <- mkGraphNodePipe(2, 3);
./GraphEngine4.bsv:    Vector#(`NUM_ENGINES, Vector#(2, Put#(GraphNodeReq))) nodeReq_tmp = ?;
./GraphEngine4.bsv:    Vector#(`NUM_ENGINES, Vector#(2, Get#(GraphNodeResp))) nodeResp_tmp = ?;
./GraphEngine.bsv:import GraphNodePipe::*;
./GraphEngine.bsv:    interface Vector#(2, Put#(GraphNodeReq)) nodeReq;
./GraphEngine.bsv:    interface Vector#(2, Get#(GraphNodeResp)) nodeResp;
./GraphEngine.bsv:    Vector#(`NUM_ENGINES, Vector#(2, GraphNodeIfc)) nodePipes = ?;
./GraphEngine.bsv:        nodePipes[i][0] <- mkGraphNodePipe(0, 1);
./GraphEngine.bsv:        nodePipes[i][1] <- mkGraphNodePipe(2, 3);
./GraphEngine.bsv:    Vector#(`NUM_ENGINES, Vector#(2, Put#(GraphNodeReq))) nodeReq_tmp = ?;
./GraphEngine.bsv:    Vector#(`NUM_ENGINES, Vector#(2, Get#(GraphNodeResp))) nodeResp_tmp = ?;
./GraphEngine.bsv.bak:import GraphNodePipe::*;
./GraphEngine.bsv.bak:    interface Vector#(2, Put#(GraphNodeReq)) nodeReq;
./GraphEngine.bsv.bak:    interface Vector#(2, Get#(GraphNodeResp)) nodeResp;
./GraphEngine.bsv.bak:    Vector#(`NUM_ENGINES, Vector#(2, GraphNodeIfc)) nodePipes = ?;
./GraphEngine.bsv.bak:        nodePipes[i][0] <- mkGraphNodePipe(0, 1);
./GraphEngine.bsv.bak:        nodePipes[i][1] <- mkGraphNodePipe(2, 3);
./GraphEngine.bsv.bak:    Vector#(`NUM_ENGINES, Vector#(2, Put#(GraphNodeReq))) nodeReq_tmp = ?;
./GraphEngine.bsv.bak:    Vector#(`NUM_ENGINES, Vector#(2, Get#(GraphNodeResp))) nodeResp_tmp = ?;
./GraphLane.bsv:            GraphNode node = unpack({rsp.data, readNode_graphPt1});
./GraphLanePipe.bsv:        GraphNode node = unpack({rsp.data, partialNode});
./GraphNodePipe.bsv:package GraphNodePipe;
./GraphNodePipe.bsv:interface GraphNodeIfc;
./GraphNodePipe.bsv:    interface Put#(GraphNodeReq) req;
./GraphNodePipe.bsv:    interface Get#(GraphNodeResp) resp;
./GraphNodePipe.bsv:module mkGraphNodePipe#(Integer lane0, Integer lane1)(GraphNodeIfc);
./GraphNodePipe.bsv:    FIFOF#(GraphNodeReq) reqQ <- mkFIFOF;
./GraphNodePipe.bsv:    FIFOF#(GraphNodeResp) respQ <- mkFIFOF;
./GraphNodePipe.bsv:        GraphNodeReq nodeReq = reqQ.first();
./GraphNodePipe.bsv:        GraphNode node = unpack({rsp.data, partialNode});
./GraphNodePipe.bsv:        respQ.enq(GraphNodeResp{node: node});
./SSSPEngine_bc.bsv:    interface Vector#(2, Get#(GraphNodeReq)) graphNodeReqs;
./SSSPEngine_bc.bsv:    interface Vector#(2, Put#(GraphNodeResp)) graphNodeResps;
./SSSPEngine_bc.bsv:    Vector#(2, FIFOF#(GraphNodeReq)) graphNodeReqQs <- replicateM(mkFIFOF);
./SSSPEngine_bc.bsv:    Vector#(2, FIFOF#(GraphNodeResp)) graphNodeRespQs <- replicateM(mkFIFOF);
./SSSPEngine_bc.bsv:    FIFOF#(GraphNode) graphNodeQ1 <- mkSizedBufBRAMFIFOF(`GRAPH_NUM_IN_FLIGHT); // # nodes to fetch ahead of edges
./SSSPEngine_bc.bsv:    FIFOF#(GraphNode) graphNodeQ2 <- mkSizedBufBRAMFIFOF(`GRAPH_NUM_IN_FLIGHT);  // # entries = # edgeReq in flight
./SSSPEngine_bc.bsv:    FIFOF#(Tuple3#(NodePayload, NodePayload, GraphNode)) casContextQ1 <- mkSizedFIFOF(4);
./SSSPEngine_bc.bsv:    FIFOF#(Tuple3#(NodePayload, NodePayload, GraphNode)) casContextQ2 <- mkSizedBufBRAMFIFOF(`SSSPENGINE_NUM_IN_FLIGHT); // # entries = # CAS requests in flight
./SSSPEngine_bc.bsv:    FIFOF#(Tuple3#(NodePayload, NodePayload, GraphNode)) casContextRetryQ <- mkSizedBufBRAMFIFOF(`SSSPENGINE_NUM_CAS_RETRY_IN_FLIGHT);
./SSSPEngine_bc.bsv:    Reg#(Bit#(48)) numGraphNodeReqFull <- mkRegU;
./SSSPEngine_bc.bsv:    Reg#(Bit#(48)) numGraphNode1Full <- mkRegU;
./SSSPEngine_bc.bsv:    Reg#(Bit#(48)) numGraphNode2Full <- mkRegU;
./SSSPEngine_bc.bsv:        graphNodeReqQs[0].enq(GraphNodeReq{id: job});
./SSSPEngine_bc.bsv:        GraphNodeResp nodeResp = graphNodeRespQs[0].first();
./SSSPEngine_bc.bsv:        GraphNode node = nodeResp.node;
./SSSPEngine_bc.bsv:        GraphNode node = graphNodeQ1.first();        
./SSSPEngine_bc.bsv:        GraphNode n = graphNodeQ2.first();
./SSSPEngine_bc.bsv:        graphNodeReqQs[1].enq(GraphNodeReq{id: e.dest});
./SSSPEngine_bc.bsv:    Reg#(Tuple3#(NodePayload, NodePayload, GraphNode)) casRetryPkt <- mkRegU;
./SSSPEngine_bc.bsv:        GraphNodeResp nodeResp = graphNodeRespQs[1].first();
./SSSPEngine_bc.bsv:        GraphNode node = nodeResp.node;
./SSSPEngine_bc.bsv:        Tuple3#(NodePayload, NodePayload, GraphNode) cxt = casContextQ1.first();
./SSSPEngine_bc.bsv:        Tuple3#(NodePayload, NodePayload, GraphNode) cxt = casContextQ2.first();
./SSSPEngine_bc.bsv:            GraphNode node = tpl_3(cxt);
./SSSPEngine_bc.bsv:            numGraphNodeReqFull <= numGraphNodeReqFull + 1;
./SSSPEngine_bc.bsv:            numGraphNode1Full <= numGraphNode1Full + 1;
./SSSPEngine_bc.bsv:            numGraphNode2Full <= numGraphNode2Full + 1;
./SSSPEngine_bc.bsv:            //$display("%0d: SSSPEngine[%0d][%0d]: Edges retired: %0d, Edges discarded: %0d, CAS issued: %0d, CAS retried: %0d, workInEmpty: %0d, workOutFull: %0d, nodeFull: %0d, edgeFull: %0d, casFull: %0d, newDistFull: %0d, graphNode1Full: %0d, graphNode2Full: %0d, casCxt1Full: %0d, casCxt2Full: %0d, casRetryFull: %0d, casRetryStallFull: %0d, Edges in flight: %0d", cycle, fpgaId, laneId, numEdgesRetired, numEdgesDiscarded, numCASIssued, numCASRetried, numWorkInEmpty, numWorkOutFull, numGraphNodeReqFull, numGraphEdgeReqFull, numGraphCASReqFull, numNewDistFull, numGraphNode1Full, numGraphNode2Full, numCasCxt1Full, numCasCxt2Full, numCasCxtRetryFull, numCasCxtRetryStallFull, (numEdgesFetched-numEdgesRetired-numEdgesDiscarded));
./SSSPEngine_bc.bsv:        numGraphNodeReqFull <= 0;
./SSSPEngine_bc.bsv:        numGraphNode1Full <= 0;
./SSSPEngine_bc.bsv:        numGraphNode2Full <= 0;
./SSSPEngine.bsv:    interface Vector#(2, Get#(GraphNodeReq)) graphNodeReqs;
./SSSPEngine.bsv:    interface Vector#(2, Put#(GraphNodeResp)) graphNodeResps;
./SSSPEngine.bsv:    Vector#(2, FIFOF#(GraphNodeReq)) graphNodeReqQs <- replicateM(mkFIFOF);
./SSSPEngine.bsv:    Vector#(2, FIFOF#(GraphNodeResp)) graphNodeRespQs <- replicateM(mkFIFOF);
./SSSPEngine.bsv:    FIFOF#(GraphNode) graphNodeQ1 <- mkSizedBufBRAMFIFOF(`GRAPH_NUM_IN_FLIGHT); // # nodes to fetch ahead of edges
./SSSPEngine.bsv:    FIFOF#(GraphNode) graphNodeQ2 <- mkSizedBufBRAMFIFOF(`GRAPH_NUM_IN_FLIGHT);  // # entries = # edgeReq in flight
./SSSPEngine.bsv:    FIFOF#(Tuple3#(NodePayload, NodePayload, GraphNode)) casContextQ1 <- mkSizedFIFOF(4);
./SSSPEngine.bsv:    FIFOF#(Tuple3#(NodePayload, NodePayload, GraphNode)) casContextQ2 <- mkSizedBufBRAMFIFOF(`SSSPENGINE_NUM_IN_FLIGHT); // # entries = # CAS requests in flight
./SSSPEngine.bsv:    FIFOF#(Tuple3#(NodePayload, NodePayload, GraphNode)) casContextRetryQ <- mkSizedBufBRAMFIFOF(`SSSPENGINE_NUM_CAS_RETRY_IN_FLIGHT);
./SSSPEngine.bsv:    Reg#(Bit#(48)) numGraphNodeReqFull <- mkRegU;
./SSSPEngine.bsv:    Reg#(Bit#(48)) numGraphNode1Full <- mkRegU;
./SSSPEngine.bsv:    Reg#(Bit#(48)) numGraphNode2Full <- mkRegU;
./SSSPEngine.bsv:            graphNodeReqQs[0].enq(GraphNodeReq{id: job, procId: procId});
./SSSPEngine.bsv:        GraphNodeResp nodeResp = graphNodeRespQs[0].first();
./SSSPEngine.bsv:        GraphNode node = nodeResp.node;
./SSSPEngine.bsv:            GraphNode node = graphNodeQ1.first();        
./SSSPEngine.bsv:        GraphNode n = graphNodeQ2.first();
./SSSPEngine.bsv:        graphNodeReqQs[1].enq(GraphNodeReq{id: e.dest});
./SSSPEngine.bsv:    Reg#(Tuple3#(NodePayload, NodePayload, GraphNode)) casRetryPkt <- mkRegU;
./SSSPEngine.bsv:        GraphNodeResp nodeResp = graphNodeRespQs[1].first();
./SSSPEngine.bsv:        GraphNode node = nodeResp.node;
./SSSPEngine.bsv:        Tuple3#(NodePayload, NodePayload, GraphNode) cxt = casContextQ1.first();
./SSSPEngine.bsv:        Tuple3#(NodePayload, NodePayload, GraphNode) cxt = casContextQ2.first();
./SSSPEngine.bsv:            GraphNode node = tpl_3(cxt);
./SSSPEngine.bsv:            numGraphNodeReqFull <= numGraphNodeReqFull + 1;
./SSSPEngine.bsv:            numGraphNode1Full <= numGraphNode1Full + 1;
./SSSPEngine.bsv:            numGraphNode2Full <= numGraphNode2Full + 1;
./SSSPEngine.bsv:            //$display("%0d: SSSPEngine[%0d][%0d]: Edges retired: %0d, Edges discarded: %0d, CAS issued: %0d, CAS retried: %0d, workInEmpty: %0d, workOutFull: %0d, nodeFull: %0d, edgeFull: %0d, casFull: %0d, newDistFull: %0d, graphNode1Full: %0d, graphNode2Full: %0d, casCxt1Full: %0d, casCxt2Full: %0d, casRetryFull: %0d, casRetryStallFull: %0d, Edges in flight: %0d", cycle, fpgaId, laneId, numEdgesRetired, numEdgesDiscarded, numCASIssued, numCASRetried, numWorkInEmpty, numWorkOutFull, numGraphNodeReqFull, numGraphEdgeReqFull, numGraphCASReqFull, numNewDistFull, numGraphNode1Full, numGraphNode2Full, numCasCxt1Full, numCasCxt2Full, numCasCxtRetryFull, numCasCxtRetryStallFull, (numEdgesFetched-numEdgesRetired-numEdgesDiscarded));
./SSSPEngine.bsv:        numGraphNodeReqFull <= 0;
./SSSPEngine.bsv:        numGraphNode1Full <= 0;
./SSSPEngine.bsv:        numGraphNode2Full <= 0;
./SSSPEngine_noedge.bsv:    interface Vector#(2, Get#(GraphNodeReq)) graphNodeReqs;
./SSSPEngine_noedge.bsv:    interface Vector#(2, Put#(GraphNodeResp)) graphNodeResps;
./SSSPEngine_noedge.bsv:    Vector#(2, FIFOF#(GraphNodeReq)) graphNodeReqQs <- replicateM(mkFIFOF);
./SSSPEngine_noedge.bsv:    Vector#(2, FIFOF#(GraphNodeResp)) graphNodeRespQs <- replicateM(mkFIFOF);
./SSSPEngine_noedge.bsv:    FIFOF#(GraphNode) graphNodeQ1 <- mkSizedBufBRAMFIFOF(`GRAPH_NUM_IN_FLIGHT); // # nodes to fetch ahead of edges
./SSSPEngine_noedge.bsv:    FIFOF#(GraphNode) graphNodeQ2 <- mkSizedBufBRAMFIFOF(`GRAPH_NUM_IN_FLIGHT);  // # entries = # edgeReq in flight
./SSSPEngine_noedge.bsv:    FIFOF#(Tuple3#(NodePayload, NodePayload, GraphNode)) casContextQ1 <- mkSizedFIFOF(4);
./SSSPEngine_noedge.bsv:    FIFOF#(Tuple3#(NodePayload, NodePayload, GraphNode)) casContextQ2 <- mkSizedBufBRAMFIFOF(`SSSPENGINE_NUM_IN_FLIGHT); // # entries = # CAS requests in flight
./SSSPEngine_noedge.bsv:    FIFOF#(Tuple3#(NodePayload, NodePayload, GraphNode)) casContextRetryQ <- mkSizedBufBRAMFIFOF(`SSSPENGINE_NUM_CAS_RETRY_IN_FLIGHT);
./SSSPEngine_noedge.bsv:    Reg#(Bit#(48)) numGraphNodeReqFull <- mkRegU;
./SSSPEngine_noedge.bsv:    Reg#(Bit#(48)) numGraphNode1Full <- mkRegU;
./SSSPEngine_noedge.bsv:    Reg#(Bit#(48)) numGraphNode2Full <- mkRegU;
./SSSPEngine_noedge.bsv:        graphNodeReqQs[0].enq(GraphNodeReq{id: job});
./SSSPEngine_noedge.bsv:        GraphNodeResp nodeResp = graphNodeRespQs[0].first();
./SSSPEngine_noedge.bsv:        GraphNode node = nodeResp.node;
./SSSPEngine_noedge.bsv:        GraphNode node = graphNodeQ1.first();        
./SSSPEngine_noedge.bsv:        GraphNode n = graphNodeQ2.first();
./SSSPEngine_noedge.bsv:        graphNodeReqQs[1].enq(GraphNodeReq{id: e.dest});
./SSSPEngine_noedge.bsv:    Reg#(Tuple3#(NodePayload, NodePayload, GraphNode)) casRetryPkt <- mkRegU;
./SSSPEngine_noedge.bsv:        GraphNodeResp nodeResp = graphNodeRespQs[1].first();
./SSSPEngine_noedge.bsv:        GraphNode node = nodeResp.node;
./SSSPEngine_noedge.bsv:        Tuple3#(NodePayload, NodePayload, GraphNode) cxt = casContextQ1.first();
./SSSPEngine_noedge.bsv:        Tuple3#(NodePayload, NodePayload, GraphNode) cxt = casContextQ2.first();
./SSSPEngine_noedge.bsv:            GraphNode node = tpl_3(cxt);
./SSSPEngine_noedge.bsv:            numGraphNodeReqFull <= numGraphNodeReqFull + 1;
./SSSPEngine_noedge.bsv:            numGraphNode1Full <= numGraphNode1Full + 1;
./SSSPEngine_noedge.bsv:            numGraphNode2Full <= numGraphNode2Full + 1;
./SSSPEngine_noedge.bsv:            //$display("%0d: SSSPEngine[%0d][%0d]: Edges retired: %0d, Edges discarded: %0d, CAS issued: %0d, CAS retried: %0d, workInEmpty: %0d, workOutFull: %0d, nodeFull: %0d, edgeFull: %0d, casFull: %0d, newDistFull: %0d, graphNode1Full: %0d, graphNode2Full: %0d, casCxt1Full: %0d, casCxt2Full: %0d, casRetryFull: %0d, casRetryStallFull: %0d, Edges in flight: %0d", cycle, fpgaId, laneId, numEdgesRetired, numEdgesDiscarded, numCASIssued, numCASRetried, numWorkInEmpty, numWorkOutFull, numGraphNodeReqFull, numGraphEdgeReqFull, numGraphCASReqFull, numNewDistFull, numGraphNode1Full, numGraphNode2Full, numCasCxt1Full, numCasCxt2Full, numCasCxtRetryFull, numCasCxtRetryStallFull, (numEdgesFetched-numEdgesRetired-numEdgesDiscarded));
./SSSPEngine_noedge.bsv:        numGraphNodeReqFull <= 0;
./SSSPEngine_noedge.bsv:        numGraphNode1Full <= 0;
./SSSPEngine_noedge.bsv:        numGraphNode2Full <= 0;
