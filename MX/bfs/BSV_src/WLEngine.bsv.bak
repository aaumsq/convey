package WLEngine;

import Vector           :: *;
import FIFOF            :: *;
import GetPut           :: *;
import ClientServer     :: *;
import Connectable      :: *;
import StmtFSM          :: *;
import FShow            :: *;
import BRAMFIFO         :: *;

import LFSR::*;

// ----------------
// BC library imports

import BC_Utils           :: *;
import BC_HW_IFC          :: *;
import BC_Transactors     :: *;

import BufBRAMFIFOF::*;
import CoalescingCounter::*;
import GaloisTypes::*;
`include "GaloisDefs.bsv"

interface WLEngine;
    interface Vector#(`NUM_ENGINES, Put#(WLEntry)) streamIn;
    interface Vector#(`NUM_ENGINES, Get#(WLEntry)) streamOut;

    interface Vector#(16, Get#(MemReq)) memReq;
    interface Vector#(16, Put#(MemResp)) memResp;

    method Action init(BC_AEId fpgaId, BC_Addr lockLoc, BC_Addr headPtrLoc, BC_Addr tailPtrLoc, BC_Addr maxSize, BC_Addr bufferLoc);
    method Action stop();
    method Bool isDone();
endinterface


`define WLENGINE_BUFOUT_SIZE 1024
`define WLENGINE_BUFIN_SIZE 1024
`define WLENTRY_SIZE 8
`define LG_WLENTRY_SIZE 3
`define WLENGINE_MAX_WRITES 16384
`define WLENGINE_BACKOFF 128
`define WRITEFSM_TIMEOUT 2048
`define READFSM_TIMEOUT 2048

(* synthesize *)
module mkWLEngine(WLEngine);
    // memOffset[0]: lock bit
    // memOffset[1]: headPtr
    // memOffset[2]: tailPtr
    // memOffset[3]: workList size
    // memOffset[4]: start of data
    
    Reg#(BC_AEId) fpgaId <- mkReg(0);
    Reg#(BC_Addr) lockLoc <- mkRegU;
    Reg#(BC_Addr) headPtr <- mkRegU;
    Reg#(BC_Addr) headPtrLoc <- mkRegU;
    
    Reg#(BC_Addr) tailPtr <- mkRegU;
    Reg#(BC_Addr) tailPtrLoc <- mkRegU;
    
    Reg#(BC_Addr) maxSize <- mkRegU;
    Reg#(BC_Addr) bufferLoc <- mkRegU;
    
    Reg#(Bool) started <- mkReg(False);
    Reg#(Bool) done <- mkReg(False);
    
    Vector#(`NUM_ENGINES, FIFOF#(WLEntry)) reqQ <- replicateM(mkFIFOF);
    Vector#(`NUM_ENGINES, FIFOF#(WLEntry)) respQ <- replicateM(mkFIFOF);
    
    Vector#(16, FIFOF#(MemReq)) memReqQ <- replicateM(mkFIFOF);
    Vector#(16, FIFOF#(MemResp)) memRespQ <- replicateM(mkFIFOF);
    
    Vector#(`NUM_ENGINES, Vector#(2, FIFOF#(WLEntry))) doubleBufIn <- replicateM(replicateM(mkSizedBufBRAMFIFOF(`WLENGINE_BUFIN_SIZE)));
    Vector#(`NUM_ENGINES, Reg#(Bit#(1))) curBufIn <- replicateM(mkRegU);

    Vector#(`NUM_ENGINES, Vector#(2, FIFOF#(WLEntry))) doubleBufOut <- replicateM(replicateM(mkSizedBufBRAMFIFOF(`WLENGINE_BUFOUT_SIZE)));
    Vector#(`NUM_ENGINES, Reg#(Bit#(1))) curBufOut <- replicateM(mkRegU);

    
    function BC_Addr getWLSize(BC_Addr head, BC_Addr tail, BC_Addr max);
        // Get number of entries in FIFO
        BC_Addr size = 0;
        if(head < tail) begin
            size = tail - head;
        end
        else if(head > tail) begin
            size = (max - tail) + head;
        end
        return size;
    endfunction
                                                          
    // Lock FSM: gets global FSM lock and updates head/tail pointers
    
    Reg#(Bit#(32)) lock_lockData <- mkRegU;
    Reg#(Bit#(16)) lockFSM_backOff <- mkRegU;
    let lockFSM <- mkFSM(
       seq
           action
               lock_lockData <= 32'b1;
           endaction
           
           // Obtain global worklist lock
           while(lock_lockData == 32'd1) seq
               action
                   //$display("%0d: mkWLEngine[%0d]: Reading lock bit at addr: %0x...", cur_cycle, fpgaId, lockLoc);
                   memReqQ[0].enq(tagged MemCAS32{addr: lockLoc, gaddr: GaloisAddress{mod:MK_WORKLIST, addr: ?}, cmpVal: 0, swapVal: 1});
               endaction
           
               action
                   MemResp rsp = memRespQ[0].first();
                   memRespQ[0].deq();
                   lock_lockData <= truncate(rsp.data);
                   //$display("%0d: mkWLEngine[%0d]: old lock bit = %0d", cur_cycle, fpgaId, rsp.data);
                   // Data is the old data, so if 1 then it failed
                   if(truncate(rsp.data) == 32'd1) begin
                       //if(`DEBUG) $display("%0d: mkWLEngine[%0d]:  Worklist is locked, retry...", cur_cycle, fpgaId);
                   end
               endaction
/*
               if(lock_lockData == 32'd1) seq
                   if(`DEBUG) $display("%0d: mkWLEngine[%0d]: ReadFSM nothing to read, stalling for %0d cycles", cur_cycle, fpgaId, `WLENGINE_BACKOFF);
                   lockFSM_backOff <= 0;
                   while(lockFSM_backOff < `WLENGINE_BACKOFF) seq
                       action
                         lockFSM_backOff <= lockFSM_backOff + 1;
                       endaction
                   endseq
               endseq
*/
          endseq
           
           // Get updated head and tail pointers
           action
               //$display("%0d: mkWLEngine[%0d]: getting updated head/tail ptrs", cur_cycle, fpgaId);
               GaloisAddress gaddr = GaloisAddress{mod: MK_WORKLIST, addr: ?};
               memReqQ[14].enq(tagged MemRead64{addr: headPtrLoc, gaddr: gaddr});
               memReqQ[0].enq(tagged MemRead64{addr: tailPtrLoc, gaddr: gaddr});
           endaction
           
           action
               MemResp headRsp = memRespQ[14].first();
               MemResp tailRsp = memRespQ[0].first();
               memRespQ[14].deq();
               memRespQ[0].deq();
               //$display("%0d: mkWLEngine[%0d]: headPtr: %0x, tailPtr: %0x", cur_cycle, fpgaId, headRsp.data, tailRsp.data);
               headPtr <= truncate(pack(headRsp.data));
               tailPtr <= truncate(pack(tailRsp.data));
           endaction
       endseq
       );
    
    // Write FSM: Writes all full buffers
    FIFOF#(Bit#(5)) writeFSM_writeQ <- mkSizedFIFOF(16);
    Reg#(Bit#(`LG_NUM_ENGINES)) writeFSM_curIdx <- mkRegU;
    Reg#(Bit#(1)) writeFSM_curBufIdx <- mkRegU;
    Reg#(Bit#(16)) writeFSM_totalWrites <- mkRegU;
    Reg#(Bool) writeFSM_done <- mkRegU;
    Reg#(BC_Addr) writeFSM_wlSize <- mkRegU;
    Reg#(BC_Addr) writeFSM_maxSizeMinusOne <- mkRegU;
    FIFOF#(Bit#(0)) writeFSM_outstandingWrites <- mkSizedFIFOF(128);
    
    rule writeFSM_catchWriteAcks(writeFSM_outstandingWrites.notEmpty);
        memRespQ[15].deq();
        writeFSM_outstandingWrites.deq();
    endrule
    
    let writeFSM <- mkFSM(
       seq
           action
               //$display("%0d: mkWLEngine: WriteFSM START", cur_cycle);
               lockFSM.start();
               writeFSM_curIdx <= 0;
               writeFSM_totalWrites <= 0;
               writeFSM_done <= False;
           endaction
           
           action
               //$display("%0d: mkWLEngine: WriteFSM lock + head/tailPtr obtained! headPtr=%0d, tailPtr=%0d", cur_cycle, headPtr, tailPtr);
               lockFSM.waitTillDone();
           endaction
           
           action
               writeFSM_wlSize <= getWLSize(headPtr, tailPtr, maxSize);
               writeFSM_maxSizeMinusOne <= maxSize-1;
               //$display("WriteFSM START");
           endaction
           
           while(!writeFSM_done) seq
               action
                   //$display("%0d: mkWLEngine WriteFSM checking doubleBufOut[%0d][%0d], writeFSM_done: %0d, notEmpty: %0d", cur_cycle, writeFSM_curIdx, writeFSM_curBufIdx, writeFSM_done, doubleBufOut[writeFSM_curIdx][writeFSM_curBufIdx].notEmpty);
                   if(writeFSM_totalWrites > `WLENGINE_MAX_WRITES) begin
                       writeFSM_done <= True;
                   end
                   else if(doubleBufOut[writeFSM_curIdx][writeFSM_curBufIdx].notEmpty) begin
                       if(writeFSM_wlSize < writeFSM_maxSizeMinusOne) begin
                           WLEntry entry = doubleBufOut[writeFSM_curIdx][writeFSM_curBufIdx].first();
                           doubleBufOut[writeFSM_curIdx][writeFSM_curBufIdx].deq();
                          
                           BC_Addr addr = bufferLoc + (tailPtr << `LG_WLENTRY_SIZE);
                           memReqQ[15].enq(tagged MemWrite64{addr: addr, gaddr: GaloisAddress{mod: MK_WORKLIST, addr: ?}, data: pack(entry)});
                           writeFSM_outstandingWrites.enq(?);
                           writeFSM_totalWrites <= writeFSM_totalWrites + 1;
                          
                           //$display("mkWLEngine: WriteFSM headPtr=%0d, tailPtr=%0d, packet: %x", headPtr, tailPtr, entry);
                           tailPtr <= tailPtr + 1;
                           writeFSM_wlSize <= writeFSM_wlSize + 1;
                       end
                       else begin
                           //$display("mkWLEngine WorkList is FULL! Breaking...");
                           writeFSM_done <= True;
                       end
                   end
                   else begin
                       //$display("mkWLEngine WriteFSM done with idx %0d", writeFSM_curIdx);
                       if(writeFSM_curIdx != fromInteger(`NUM_ENGINES-1)) begin
                           writeFSM_curIdx <= writeFSM_curIdx + 1;
                           //$display("mkWLEngine WriteFSM incrementing writeFSM_curIdx: %0d", writeFSM_curIdx+1);
                       end
                       else begin
                           //$display("%0d: mkWLEngine: WriteFSM writeFSM done!", cur_cycle);
                           writeFSM_done <= True;
                       end
                   end
               endaction
           endseq
           
           while(writeFSM_outstandingWrites.notEmpty) seq
               action
                   //$display("%0d: WriteFSM: waiting for %0d writes to complete", cur_cycle, writeFSM_numWrites.getVal());
                   noAction;
               endaction
           endseq
           
           // Write head and tailPtrs
           action
               //$display("%0d: mkWLEngine[%0d]: writeFSM writing new tail ptrs, tailPtr=%0d", cur_cycle, fpgaId, tailPtr);
               GaloisAddress gaddr = GaloisAddress{mod: MK_WORKLIST, addr: ?};
               //memReqQ[14].enq(tagged MemWrite64{addr: headPtrLoc, gaddr: gaddr, data: extend(headPtr)});
               memReqQ[15].enq(tagged MemWrite64{addr: tailPtrLoc, gaddr: gaddr, data: extend(tailPtr)});
           endaction
           
           // When head/tailPtr writes complete, unlock
           action
               //memRespQ[14].deq();
               memRespQ[15].deq();
               memReqQ[15].enq(tagged MemWrite32{addr: lockLoc, gaddr: GaloisAddress{mod:MK_WORKLIST, addr: ?}, data: 0});
               writeFSM_curBufIdx <= writeFSM_curBufIdx + 1;
           endaction
           
           action
               if(writeFSM_totalWrites > 0) 
                   //$display("%0d: mkWLEngine[%0d]: WriteFSM wrote %0d entries", cur_cycle, fpgaId, writeFSM_totalWrites);
               memRespQ[15].deq();
               //$display("%0d: mkWLEngine[%0d]: WriteFSM done, unlocking!", cur_cycle, fpgaId);
           endaction
       endseq
       );
    
    // Read FSM: Fills one buffer
    Reg#(BC_Addr) readFSM_numEntries <- mkRegU;
    Reg#(BC_Addr) readFSM_curEntry <- mkRegU;
    Reg#(Bit#(10)) readFSM_backOff <- mkRegU;
    Reg#(Bit#(`LG_NUM_ENGINES)) readFSM_bufIdx <- mkRegU;
    Reg#(Bit#(1)) readFSM_buf <- mkRegU;
    Reg#(Bool) readFSM_success <- mkRegU;
    FIFOF#(Bit#(0)) readFSM_outstandingReads <- mkSizedFIFOF(128);
    
    Reg#(Bit#(10)) streamOut_count <- mkReg(0);
    rule readFSM_processReads(readFSM_outstandingReads.notEmpty);
        MemResp rsp = memRespQ[15].first();
        memRespQ[15].deq();
        streamOut_count <= streamOut_count + 1;
        readFSM_outstandingReads.deq();
        
        WLEntry entry = unpack(rsp.data);
        if(`DEBUG) $display("%0d: mkWLEngine[%0d]: ReadFSM entry priority: %0x, graphId: %0x", cur_cycle, fpgaId, tpl_1(entry), tpl_2(entry));
        doubleBufIn[readFSM_bufIdx][readFSM_buf].enq(entry);
    endrule
    
    Reg#(BC_Addr) headPtr_r <- mkRegU;
    Reg#(BC_Addr) tailPtr_r <- mkRegU;
    let readFSM <- mkFSM(
       seq
           action
               //$display("%0d: mkWLEngine[%0d]: getting updated head/tail ptrs", cur_cycle, fpgaId);
               GaloisAddress gaddr = GaloisAddress{mod: MK_WORKLIST, addr: ?};
               memReqQ[12].enq(tagged MemRead64{addr: headPtrLoc, gaddr: gaddr});
               memReqQ[13].enq(tagged MemRead64{addr: tailPtrLoc, gaddr: gaddr});
           endaction
           
           action
               MemResp headRsp = memRespQ[12].first();
               MemResp tailRsp = memRespQ[13].first();
               memRespQ[12].deq();
               memRespQ[13].deq();
               //$display("%0d: mkWLEngine[%0d]: headPtr: %0x, tailPtr: %0x", cur_cycle, fpgaId, headRsp.data, tailRsp.data);
               headPtr_r <= truncate(pack(headRsp.data));
               tailPtr_r <= truncate(pack(tailRsp.data));
           endaction

           if (headPtr_r != tailPtr_r) seq
               action
                   readFSM_success <= False;
                   lockFSM.start();
                   //$display("%0d: mkWLEngine[%0d]: Starting readFSM, filling buf %0d idx %0d...", cur_cycle, fpgaId, readFSM_buf, readFSM_bufIdx);
               endaction
               
               action
                   lockFSM.waitTillDone();
               endaction
       
               action
                   // Get number of entries in FIFO
                   BC_Addr size = 0;
                   if(headPtr < tailPtr) begin
                       size = tailPtr - headPtr;
                   end
                   else if(headPtr > tailPtr) begin
                       size = (maxSize - tailPtr) + headPtr;
                   end
                   
                   // Determine number of entries to read
                   BC_Addr entries = ?;
                   if(size > `WLENGINE_BUFIN_SIZE) begin
                       entries = `WLENGINE_BUFIN_SIZE;
                   end
                   else begin
                       entries = size;
                   end
                   //$display("%0d: mkWLEngine[%0d]: ReadFSM headPtr: %0d, tailPtr: %0d, WL size: %0d, reading %0d entries", cur_cycle, fpgaId, headPtr, tailPtr, size, entries);
                   readFSM_numEntries <= entries;
                   readFSM_curEntry <= 0;
               endaction
               
               // Read entries and send to buffer
               if(readFSM_numEntries > 0) seq
                   while(readFSM_curEntry < readFSM_numEntries) seq
                       action
                           //$display("%0d: mkWLEngine[%0d]: ReadFSM Reading entry %0d of %0d, writing to buf%0d[%0d]...", cur_cycle, fpgaId, readFSM_curEntry, readFSM_numEntries, readFSM_bufIdx, readFSM_buf);
                           BC_Addr addr = bufferLoc + (headPtr << `LG_WLENTRY_SIZE);
                           memReqQ[15].enq(tagged MemRead64{addr: addr, gaddr: GaloisAddress{mod: MK_WORKLIST, addr: ?}});
                           readFSM_outstandingReads.enq(?);
                           
                           readFSM_curEntry <= readFSM_curEntry + 1;
                           
                           if(headPtr == (maxSize-1)) begin
                             headPtr <= 0;
                           end
                           else begin
                             headPtr <= headPtr + 1;
                           end
                       endaction
                   endseq
                   
                   while(readFSM_outstandingReads.notEmpty) seq
                       action
                           //$display("%0d: ReadFSM: waiting for %0d reads to complete", cur_cycle, readFSM_numReads.getVal());
                           noAction;
                       endaction
                   endseq
                   
                   // Write head and tailPtrs
                   action
                       //$display("%0d: mkWLEngine[%0d]: ReadFSM writing new head/tail ptrs, headPtr=%0d", cur_cycle, fpgaId, headPtr);
                       GaloisAddress gaddr = GaloisAddress{mod: MK_WORKLIST, addr: ?};
                       memReqQ[12].enq(tagged MemWrite64{addr: headPtrLoc, gaddr: gaddr, data: extend(headPtr)});
                       //memReqQ[13].enq(tagged MemWrite64{addr: tailPtrLoc, gaddr: gaddr, data: extend(tailPtr)});
                   endaction
                   
                   // When head/tailPtr writes complete, unlock
                   action
                       memRespQ[12].deq();
                       //memRespQ[13].deq();
                       memReqQ[12].enq(tagged MemWrite32{addr: lockLoc, gaddr: GaloisAddress{mod:MK_WORKLIST, addr: ?}, data: 0});
                   endaction
                   
                   action
                       //$display("%0d: mkWLEngine[%0d]: ReadFSM done, unlocking!", cur_cycle, fpgaId);
                       //$display("%0d: mkWLEngine[%0d]: ReadFSM read %0d entries for idx %0d[%0d]", cur_cycle, fpgaId, readFSM_numEntries, readFSM_bufIdx, readFSM_buf);
                       memRespQ[12].deq();
                       readFSM_success <= True;
                   endaction
               endseq
               else seq
                   // No data, unlock and stall avoid needless contention
                   action
                       memReqQ[12].enq(tagged MemWrite32{addr: lockLoc, gaddr: GaloisAddress{mod:MK_WORKLIST, addr: ?}, data: 0});
                       //$display("%0d: mkWLEngine[%0d]: ReadFSM done, unlocking!", cur_cycle, fpgaId);
                   endaction
                   
                   action
                       memRespQ[12].deq();
                   endaction
/*                   
                   if(`DEBUG) $display("%0d: mkWLEngine[%0d]: ReadFSM nothing to read, stalling for %0d cycles", cur_cycle, fpgaId, `WLENGINE_BACKOFF);
                   readFSM_backOff <= 0;
                   while(readFSM_backOff < `WLENGINE_BACKOFF) seq
                       action
                           readFSM_backOff <= readFSM_backOff + 1;
                       endaction
                   endseq
                   
                   action
                       noAction;
                   endaction
 */
               endseq
           endseq
           else seq
               action
                   readFSM_backOff <= 0;
                   //$display("%0d: mkWLEngine[%d]: readFSM nothing to read", cur_cycle, fpgaId);
               endaction

               while (readFSM_backOff < `WLENGINE_BACKOFF) seq
                   action 
                       readFSM_backOff <= readFSM_backOff + 1;
                   endaction
               endseq
           endseq
       endseq
       );
    
    Reg#(Bit#(16)) triggerWriteFSM_timeout <- mkRegU;

    //(* preempts = "triggerWriteFSM, startRead" *)
    rule startRead(started && readFSM.done && writeFSM.done);
        function Bool bufInEmptyF0(Integer x) = !doubleBufIn[x][0].notEmpty;
        function Bool bufInEmptyF1(Integer x) = !doubleBufIn[x][1].notEmpty;
        Vector#(`NUM_ENGINES, Bool) bufInEmpties0 = genWith(bufInEmptyF0);
        Vector#(`NUM_ENGINES, Bool) bufInEmpties1 = genWith(bufInEmptyF1);
        let elem0 = findElem(True, bufInEmpties0);
        let elem1 = findElem(True, bufInEmpties1);
        if(isValid(elem0)) begin
            Bit#(`LG_NUM_ENGINES) idx = pack(fromMaybe(?, elem0));
            //$display("BufInEmpties: %b, Empty idx: %0d", bufInEmpties0, idx);
            readFSM_bufIdx <= idx;
            readFSM_buf <= 0;
            readFSM.start();
        end
        else if(isValid(elem1)) begin
            Bit#(`LG_NUM_ENGINES) idx = pack(fromMaybe(?, elem1));
            //$display("BufInEmpties: %b, Empty idx: %0d", idx);
            readFSM_bufIdx <= idx;
            readFSM_buf <= 1;
            readFSM.start();
        end
    endrule
    
    //Reg#(Bit#(1)) triggerWriteFSM_lastIdx <- mkRegU;
    rule triggerWriteFSM(started && writeFSM.done);
        function Bool bufOutFullF(Integer x) = !doubleBufOut[x][writeFSM_curBufIdx].notFull;
        function Bool bufOutEmptyF(Integer x) = doubleBufOut[x][writeFSM_curBufIdx].notEmpty;
        Vector#(`NUM_ENGINES, Bool) bufOutFulls = genWith(bufOutFullF);
        Vector#(`NUM_ENGINES, Bool) bufOutEmpties = genWith(bufOutEmptyF);
        function Bool isTrueF(Bool x) = x;
        if(any(isTrueF, bufOutFulls)) begin
            //$display("WLEngine triggerWriteFSM curBuf: %0d full: %0b", writeFSM_curBufIdx, bufOutFulls);
            writeFSM.start();
            triggerWriteFSM_timeout <= 0;
        end
        else begin
            if(triggerWriteFSM_timeout > `WRITEFSM_TIMEOUT && any(isTrueF, bufOutEmpties)) begin
                if(`DEBUG) $display("WLEngine triggerWriteFSM curBuf: %0d empty: %b", writeFSM_curBufIdx, bufOutEmpties);
                triggerWriteFSM_timeout <= 0;
                //triggerWriteFSM_lastIdx <= triggerWriteFSM_lastIdx + 1;
                //writeFSM_curBufIdx <= triggerWriteFSM_lastIdx;
                writeFSM.start();
                //$display("Triggering WriteFSM...");
            end
            else begin
                writeFSM_curBufIdx <= writeFSM_curBufIdx + 1;
                triggerWriteFSM_timeout <= triggerWriteFSM_timeout + 1;
                //$display("Waiting");
            end
        end
    endrule
    
    //Vector#(4, Reg#(Bit#(10))) streamIn_count <- replicateM(mkReg(0));
    //Reg#(UInt#(2)) baseIdx <- mkReg(0);

    //rule baseInc(started);
    //    //if (baseIdx < 2)
    //    //    baseIdx <= baseIdx + 1;
    //    //else
    //    //    baseIdx <= 0;
    //    baseIdx <= baseIdx + 1;
    //endrule

    //(* conflict_free = "bufToStream0, bufToStream1, bufToStream2, bufToStream3" *)
    //rule bufToStream0(started);
    //    UInt#(2) edgeIdx = baseIdx;
    //    if(((curBufIn[0] == 0) && !doubleBufIn[0][0].notEmpty && doubleBufIn[0][1].notEmpty) ||
    //       ((curBufIn[0] == 1) && !doubleBufIn[0][1].notEmpty && doubleBufIn[0][0].notEmpty)) begin
    //       // Flip bit
    //       curBufIn[0] <= 1 + curBufIn[0];
    //    end

    //    if((curBufIn[0] == 0) && doubleBufIn[0][0].notEmpty) begin
    //        WLEntry pkt = doubleBufIn[0][0].first();
    //        $display("%0d: mkWLEngine curBufIn[0] packet %x streaming to WorkListFIFOF", cur_cycle, pkt);
    //        doubleBufIn[0][0].deq();
    //        respQ[edgeIdx].enq(pkt);
    //    end
    //    if((curBufIn[0] == 1) && doubleBufIn[0][1].notEmpty) begin
    //        WLEntry pkt = doubleBufIn[0][1].first();
    //        $display("%0d: mkWLEngine curBufIn[1] packet %x streaming to WorkListFIFOF", cur_cycle, pkt);
    //        doubleBufIn[0][1].deq();
    //        respQ[edgeIdx].enq(pkt);
    //    end
    //endrule
    //rule bufToStream1(started);
    //    //UInt#(2) edgeIdx = (baseIdx == 0) ? 1 : (baseIdx == 1) ? 2 : 0;
    //    UInt#(2) edgeIdx = truncate(baseIdx+1);
    //    if(((curBufIn[1] == 0) && !doubleBufIn[1][0].notEmpty && doubleBufIn[1][1].notEmpty) ||
    //       ((curBufIn[1] == 1) && !doubleBufIn[1][1].notEmpty && doubleBufIn[1][0].notEmpty)) begin
    //       // Flip bit
    //       curBufIn[1] <= 1 + curBufIn[1];
    //    end

    //    if((curBufIn[1] == 0) && doubleBufIn[1][0].notEmpty) begin
    //        WLEntry pkt = doubleBufIn[1][0].first();
    //        $display("%0d: mkWLEngine curBufIn[0] packet %x streaming to WorkListFIFOF", cur_cycle, pkt);
    //        doubleBufIn[1][0].deq();
    //        respQ[edgeIdx].enq(pkt);
    //    end
    //    if((curBufIn[1] == 1) && doubleBufIn[1][1].notEmpty) begin
    //        WLEntry pkt = doubleBufIn[1][1].first();
    //        $display("%0d: mkWLEngine curBufIn[1] packet %x streaming to WorkListFIFOF", cur_cycle, pkt);
    //        doubleBufIn[1][1].deq();
    //        respQ[edgeIdx].enq(pkt);
    //    end
    //endrule
    //rule bufToStream2(started);
    //    //UInt#(2) edgeIdx = (baseIdx == 0) ? 2 : (baseIdx == 1) ? 0 : 1;
    //    UInt#(2) edgeIdx = truncate(baseIdx+2);
    //    if(((curBufIn[2] == 0) && !doubleBufIn[2][0].notEmpty && doubleBufIn[2][1].notEmpty) ||
    //       ((curBufIn[2] == 1) && !doubleBufIn[2][1].notEmpty && doubleBufIn[2][0].notEmpty)) begin
    //       // Flip bit
    //       curBufIn[2] <= 1 + curBufIn[2];
    //    end

    //    if((curBufIn[2] == 0) && doubleBufIn[2][0].notEmpty) begin
    //        WLEntry pkt = doubleBufIn[2][0].first();
    //        $display("%0d: mkWLEngine curBufIn[0] packet %x streaming to WorkListFIFOF", cur_cycle, pkt);
    //        doubleBufIn[2][0].deq();
    //        respQ[edgeIdx].enq(pkt);
    //    end
    //    if((curBufIn[2] == 1) && doubleBufIn[2][1].notEmpty) begin
    //        WLEntry pkt = doubleBufIn[2][1].first();
    //        $display("%0d: mkWLEngine curBufIn[1] packet %x streaming to WorkListFIFOF", cur_cycle, pkt);
    //        doubleBufIn[2][1].deq();
    //        respQ[edgeIdx].enq(pkt);
    //    end
    //endrule
    //rule bufToStream3(started);
    //    UInt#(2) edgeIdx = truncate(baseIdx+3);
    //    if(((curBufIn[3] == 0) && !doubleBufIn[3][0].notEmpty && doubleBufIn[3][1].notEmpty) ||
    //       ((curBufIn[3] == 1) && !doubleBufIn[3][1].notEmpty && doubleBufIn[3][0].notEmpty)) begin
    //       // Flip bit
    //       curBufIn[3] <= 1 + curBufIn[3];
    //    end

    //    if((curBufIn[3] == 0) && doubleBufIn[3][0].notEmpty) begin
    //        WLEntry pkt = doubleBufIn[3][0].first();
    //        $display("%0d: mkWLEngine curBufIn[0] packet %x streaming to WorkListFIFOF", cur_cycle, pkt);
    //        doubleBufIn[3][0].deq();
    //        respQ[edgeIdx].enq(pkt);
    //    end
    //    if((curBufIn[3] == 1) && doubleBufIn[3][1].notEmpty) begin
    //        WLEntry pkt = doubleBufIn[3][1].first();
    //        $display("%0d: mkWLEngine curBufIn[1] packet %x streaming to WorkListFIFOF", cur_cycle, pkt);
    //        doubleBufIn[3][1].deq();
    //        respQ[edgeIdx].enq(pkt);
    //    end
    //endrule

    
    for(Integer i = 0; i < `NUM_ENGINES; i = i + 1) begin
        
        rule setCurBufIn(started);
            if(((curBufIn[i] == 0) && !doubleBufIn[i][0].notEmpty && doubleBufIn[i][1].notEmpty) ||
               ((curBufIn[i] == 1) && !doubleBufIn[i][1].notEmpty && doubleBufIn[i][0].notEmpty)) begin
               // Flip bit
               //$display("%0d: flip curBufIn[%0d]", cur_cycle, i);
               curBufIn[i] <= 1 + curBufIn[i];
            end
            
            if((curBufIn[i] == 0) && doubleBufIn[i][0].notEmpty) begin
                WLEntry pkt = doubleBufIn[i][0].first();
                //$display("%0d: mkWLEngine curBufIn[0] packet %x streaming to WorkListFIFOF", cur_cycle, pkt);
                doubleBufIn[i][0].deq();
                respQ[i].enq(pkt);
            end
            if((curBufIn[i] == 1) && doubleBufIn[i][1].notEmpty) begin
                WLEntry pkt = doubleBufIn[i][1].first();
                //$display("%0d: mkWLEngine curBufIn[1] packet %x streaming to WorkListFIFOF", cur_cycle, pkt);
                doubleBufIn[i][1].deq();
                respQ[i].enq(pkt);
            end
        endrule
        
        rule streamToBuf(started);
            WLEntry entry = reqQ[i].first();
            reqQ[i].deq();
            //streamIn_count[i] <= streamIn_count[i] + 1;
            
            Bit#(1) curBuf = curBufOut[i];
            
            if(doubleBufOut[i][curBuf].notFull) begin
                //$display("mkWLEngine reqQ->doubleBuf[%0d][%0d]", i, curBuf);
                doubleBufOut[i][curBuf].enq(entry);
            end
            else begin
                //$display("mkWLEngine reqQ->doubleBuf[%0d][%0d]", i, curBuf+1);
                doubleBufOut[i][curBuf+1].enq(entry);
                curBufOut[i] <= curBuf + 1;
            end
        endrule        
    end
    
    rule calcDone(started);
        // No readFSM.done since it's constantly triggered whenever any input buffers are empty!
        let cycle <- cur_cycle;
        Bool isDone = True;
        for(Integer i = 0; i < `NUM_ENGINES; i=i+1) begin
            if(reqQ[i].notEmpty || respQ[i].notEmpty || doubleBufIn[i][0].notEmpty || doubleBufIn[i][1].notEmpty || doubleBufOut[i][0].notEmpty || doubleBufOut[i][1].notEmpty) begin
                isDone = False;
            end
            //if(cycle %1024 == 0) $display("%0d: Lane %0d notEmpties: reqQ:%b respQ:%b bufIn0:%b bufIn1:%b, doubBufOut0:%b, doubBufOut1:%b", cur_cycle, i, reqQ[i].notEmpty, respQ[i].notEmpty, doubleBufIn[i][0].notEmpty, doubleBufIn[i][1].notEmpty, doubleBufOut[i][0].notEmpty, doubleBufOut[i][1].notEmpty);
        end
        
        done <= (headPtr == tailPtr) && isDone && (!readFSM_outstandingReads.notEmpty);
        //$display("%0d: worklist done, write: %0d entries, read: %0d entries, head: %0d, tail: %0d.", cur_cycle, streamIn_count[0]+streamIn_count[1]+streamIn_count[2], streamOut_count, headPtr, tailPtr);
	//if (cycle % 1024 == 0) $display("WLEngine[%0d]: headPtr is %0d, tailPtr is %0d, empty done is %0d", fpgaId, headPtr, tailPtr, isDone);
        //if(cycle == 10000000) $display("%0d: wlEngine done calculation: HeadPtr:%0d, tailPtr:%0d, writeDone:%0b, readDone:%0b, isDone:%0b", cur_cycle, headPtr, tailPtr, writeFSM.done, readFSM.done, isDone);
    endrule
    
    method isDone();
        return done;
    endmethod
    
    method Action init(BC_AEId fpgaid, BC_Addr lockloc, BC_Addr headptrloc, BC_Addr tailptrloc, BC_Addr maxsize, BC_Addr bufferloc);
        $display("%0d: mkWLEngine[%0d]: INIT, fpgaid: %0x, lockLoc:%0x, headPtrLoc: %0x, tailPtrLoc: %0x, maxSize: %0d, bufferLoc: %0x", cur_cycle, fpgaid, fpgaid, lockloc, headptrloc, tailptrloc, maxsize, bufferloc);
        fpgaId <= fpgaid;
        lockLoc <= lockloc;
        headPtrLoc <= headptrloc;
        tailPtrLoc <= tailptrloc;
	headPtr <= 0;
	tailPtr <= 1;
        maxSize <= maxsize;
        bufferLoc <= bufferloc;
        started <= True;
        
        
        writeFSM_curIdx <= 0;
        writeFSM_curBufIdx <= 0;
        triggerWriteFSM_timeout <= 0;
        
        for(Integer i = 0; i < `NUM_ENGINES; i=i+1) begin
            curBufIn[i] <= 0;
            curBufOut[i] <= 0;
        end
    endmethod

    method Action stop;
        started <= False;
    endmethod
    
    interface streamIn = map(toPut, reqQ);
    interface streamOut = map(toGet, respQ);
    interface memReq = map(toGet, memReqQ);
    interface memResp = map(toPut, memRespQ);
endmodule


endpackage
